
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQEQNOTEQleftGTLTGELEleftPLUSMINUSleftTIMESDIVIDEMODULErightPOWERrightNOTleftDOTleftLPARENAND ANY ARROW BACKTICK BOOLEAN_TYPE BREAK CASE CHARACTER CHAR_TYPE CLASS COLON COMMA CONST CONSTRUCTOR DEFAULT DIVIDE DOLLAR DOT ELSE EQEQ EQUALS FALSE FOR FUNCTION GE GT IDENTIFIER IF INTERFACE LBRACE LBRACKET LE LET LPAREN LT MINUS MODULE NOT NOTEQ NUMBER NUMBER_TYPE OR PIPE PLUS POWER PRIVATE PROTECTED PUBLIC QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRING_TYPE SWITCH THIS TIMES TRUE TYPE TYPEOF VAR VOID WHILEprogram : statement_liststatement_list : statement\n                        | statement statement_liststatement : assignment SEMICOLON\n                    | expression SEMICOLON\n                    | if_statement\n                    | function_def\n                    | return_statement\n                    | class_declarationassignment : LET IDENTIFIER EQUALS value\n                    | LET IDENTIFIER COLON data_type EQUALS value\n                    | LET IDENTIFIER COLON data_type\n                    | CONST IDENTIFIER EQUALS value\n                    | CONST IDENTIFIER COLON data_type EQUALS value\n                    | VAR IDENTIFIER EQUALS value\n                    | VAR IDENTIFIER COLON data_type EQUALS value\n                    | VAR IDENTIFIER COLON data_type\n                    | IDENTIFIER EQUALS valuedata_type : STRING_TYPE\n                    | NUMBER_TYPE\n                    | BOOLEAN_TYPE\n                    | CHAR_TYPE\n                    | array_type\n                    | object_type_literalvalue : STRING\n                | CHARACTER\n                | array\n                | object_literal\n                | arithmetic_expression\n                | logical_expression\n                | expressionarray_type : NUMBER_TYPE LBRACKET RBRACKET\n                    | STRING_TYPE LBRACKET RBRACKET\n                    | BOOLEAN_TYPE LBRACKET RBRACKET\n                    | ANY LBRACKET RBRACKETarray : LBRACKET RBRACKET\n                | LBRACKET element_list RBRACKETelement_list : value\n                | value COMMA element_listobject_type_literal : LBRACE property_list RBRACE\n                           | LBRACE RBRACEobject_literal : LBRACE property_assignment_list RBRACE\n                      | LBRACE RBRACEproperty : IDENTIFIER COLON data_typeproperty_assignment_list : property_assignment\n                                | property_assignment COMMA property_assignment_listproperty_assignment : IDENTIFIER COLON value\n                           | STRING COLON valueproperty_list : property\n                     | property SEMICOLON property_listarithmetic_expression : arithmetic_expression PLUS termarithmetic_expression : arithmetic_expression MINUS termarithmetic_expression : termterm : term TIMES factorterm : term DIVIDE factorterm : term MODULE factorterm : factorfactor : atom POWER factorfactor : atomatom : NUMBER\n                | IDENTIFIER\n                | LPAREN arithmetic_expression RPARENlogical_expression : logical_expression AND logical_term\n                          | logical_expression OR logical_term\n                          | logical_termlogical_term : NOT logical_factor\n                    | logical_factorlogical_factor : comparison_expression\n                      | IDENTIFIER\n                      | TRUE\n                      | FALSE\n                      | LPAREN logical_expression RPARENcomparison_expression : arithmetic_expression EQEQ arithmetic_expression\n                             | arithmetic_expression NOTEQ arithmetic_expression\n                             | arithmetic_expression GT arithmetic_expression\n                             | arithmetic_expression LT arithmetic_expression\n                             | arithmetic_expression GE arithmetic_expression\n                             | arithmetic_expression LE arithmetic_expressionexpression : expression DOT IDENTIFIER\n                    | IDENTIFIER DOT IDENTIFIERexpression : IDENTIFIER LPAREN RPAREN\n                  | IDENTIFIER LPAREN argument_list RPARENargument_list : expression\n                     | expression COMMA argument_listclass_declaration : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body : class_member_list\n                  | emptyclass_member_list : class_member\n                         | class_member class_member_listclass_member : assignment\n                    | function_def\n                    | propertyempty :function_def : FUNCTION IDENTIFIER LPAREN RPAREN statement_block\n                    | FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_blockparam_list : IDENTIFIER\n                  | IDENTIFIER COMMA param_listreturn_statement : RETURN expression SEMICOLONstatement_block : LBRACE statement_list RBRACE\n                            | statementif_statement : IF LPAREN logical_expression RPAREN statement_block\n                        | IF LPAREN logical_expression RPAREN statement_block ELSE statement_block'
    
_lr_action_items = {'LET':([0,3,6,7,8,9,19,20,33,36,37,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,67,70,71,72,73,74,75,76,77,78,79,92,96,105,107,109,111,112,113,115,121,122,123,124,131,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,161,162,163,165,166,168,170,171,172,173,174,175,182,183,184,187,188,190,191,],[10,10,-6,-7,-8,-9,-4,-5,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-98,10,-10,-12,-19,-20,-21,-22,-23,-24,-36,-43,-66,-82,-13,-15,-17,10,10,10,-90,-91,-92,-41,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-101,10,-100,-94,10,-85,-11,-33,-32,-34,-35,-40,-14,-16,10,-95,-44,-102,-99,]),'CONST':([0,3,6,7,8,9,19,20,33,36,37,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,67,70,71,72,73,74,75,76,77,78,79,92,96,105,107,109,111,112,113,115,121,122,123,124,131,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,161,162,163,165,166,168,170,171,172,173,174,175,182,183,184,187,188,190,191,],[12,12,-6,-7,-8,-9,-4,-5,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-98,12,-10,-12,-19,-20,-21,-22,-23,-24,-36,-43,-66,-82,-13,-15,-17,12,12,12,-90,-91,-92,-41,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-101,12,-100,-94,12,-85,-11,-33,-32,-34,-35,-40,-14,-16,12,-95,-44,-102,-99,]),'VAR':([0,3,6,7,8,9,19,20,33,36,37,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,67,70,71,72,73,74,75,76,77,78,79,92,96,105,107,109,111,112,113,115,121,122,123,124,131,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,161,162,163,165,166,168,170,171,172,173,174,175,182,183,184,187,188,190,191,],[13,13,-6,-7,-8,-9,-4,-5,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-98,13,-10,-12,-19,-20,-21,-22,-23,-24,-36,-43,-66,-82,-13,-15,-17,13,13,13,-90,-91,-92,-41,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-101,13,-100,-94,13,-85,-11,-33,-32,-34,-35,-40,-14,-16,13,-95,-44,-102,-99,]),'IDENTIFIER':([0,3,6,7,8,9,10,12,13,15,16,17,19,20,21,23,24,25,28,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,64,67,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,96,100,101,102,105,106,107,108,109,111,112,113,115,121,122,123,124,125,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,170,171,172,173,174,175,176,182,183,184,187,188,190,191,],[11,11,-6,-7,-8,-9,22,26,27,29,31,32,-4,-5,33,36,58,31,67,-79,36,-61,-18,-25,-26,-27,-28,-29,-30,-31,36,98,-53,-65,67,-57,67,-67,-59,-68,-70,-71,-60,-80,-81,36,36,-69,114,-98,117,-10,-12,-19,-20,-21,-22,-23,-24,133,135,135,135,135,135,135,135,135,67,67,-36,-43,135,135,135,-66,135,-82,31,-13,-15,-17,11,11,117,-90,-91,-92,36,-41,-51,-61,135,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,36,-42,98,36,36,-54,-55,-56,-72,-62,-58,36,36,-101,11,-100,114,-94,11,-85,-11,-33,-32,-34,-35,-40,133,-14,-16,11,-95,-44,-102,-99,]),'IF':([0,3,6,7,8,9,19,20,70,113,115,161,162,163,165,166,168,184,187,190,191,],[14,14,-6,-7,-8,-9,-4,-5,-98,14,14,-101,14,-100,-94,14,-85,14,-95,-102,-99,]),'FUNCTION':([0,3,6,7,8,9,19,20,33,36,37,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,67,70,71,72,73,74,75,76,77,78,79,92,96,105,107,109,111,112,113,115,121,122,123,124,131,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,161,162,163,165,166,168,170,171,172,173,174,175,182,183,184,187,188,190,191,],[15,15,-6,-7,-8,-9,-4,-5,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-98,15,-10,-12,-19,-20,-21,-22,-23,-24,-36,-43,-66,-82,-13,-15,-17,15,15,15,-90,-91,-92,-41,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-101,15,-100,-94,15,-85,-11,-33,-32,-34,-35,-40,-14,-16,15,-95,-44,-102,-99,]),'RETURN':([0,3,6,7,8,9,19,20,70,113,115,161,162,163,165,166,168,184,187,190,191,],[16,16,-6,-7,-8,-9,-4,-5,-98,16,16,-101,16,-100,-94,16,-85,16,-95,-102,-99,]),'CLASS':([0,3,6,7,8,9,19,20,70,113,115,161,162,163,165,166,168,184,187,190,191,],[17,17,-6,-7,-8,-9,-4,-5,-98,17,17,-101,17,-100,-94,17,-85,17,-95,-102,-99,]),'$end':([1,2,3,6,7,8,9,18,19,20,70,161,163,165,168,187,190,191,],[0,-1,-2,-6,-7,-8,-9,-3,-4,-5,-98,-101,-100,-94,-85,-95,-102,-99,]),'RBRACE':([3,6,7,8,9,18,19,20,33,36,37,38,39,40,41,42,43,44,46,47,48,50,52,53,54,55,56,57,58,59,67,70,71,72,73,74,75,76,77,78,79,81,92,95,96,97,105,107,109,111,112,118,119,120,121,122,123,124,130,131,132,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,161,163,165,168,169,170,171,172,173,174,175,179,180,181,182,183,185,187,188,189,190,191,],[-2,-6,-7,-8,-9,-3,-4,-5,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,96,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-98,-93,-10,-12,-19,-20,-21,-22,-23,-24,131,-36,148,-43,-45,-66,-82,-13,-15,-17,168,-86,-87,-88,-90,-91,-92,175,-41,-49,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-101,-100,-94,-85,-89,-11,-33,-32,-34,-35,-40,-46,-47,-48,-14,-16,191,-95,-44,-50,-102,-99,]),'SEMICOLON':([4,5,30,33,36,37,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,67,72,73,74,75,76,77,78,79,92,96,105,107,109,111,112,131,132,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,170,171,172,173,174,175,182,183,188,],[19,20,70,-79,-61,-18,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-10,-12,-19,-20,-21,-22,-23,-24,-36,-43,-66,-82,-13,-15,-17,-41,176,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-11,-33,-32,-34,-35,-40,-14,-16,-44,]),'DOT':([5,11,30,31,33,36,44,58,59,61,107,],[21,24,21,24,-79,24,21,-80,-81,21,-82,]),'ELSE':([6,7,8,9,19,20,70,161,163,165,168,187,190,191,],[-6,-7,-8,-9,-4,-5,-98,184,-100,-94,-85,-95,-102,-99,]),'EQUALS':([11,22,26,27,73,74,75,76,77,78,79,110,112,117,131,171,172,173,174,175,],[23,34,62,64,125,-19,-20,-21,-22,-23,-24,159,160,23,-41,-33,-32,-34,-35,-40,]),'LPAREN':([11,14,23,28,29,31,34,36,45,49,51,62,64,82,83,84,85,86,87,88,89,90,91,100,101,102,106,125,136,147,150,151,159,160,],[25,28,49,49,69,25,49,25,49,49,49,49,49,136,136,136,136,136,136,136,136,49,49,136,136,136,136,49,136,49,49,49,49,49,]),'COLON':([22,26,27,98,99,117,133,],[35,63,65,150,151,167,167,]),'STRING':([23,34,45,46,62,64,125,147,149,150,151,159,160,],[38,38,38,99,38,38,38,38,99,38,38,38,38,]),'CHARACTER':([23,34,45,62,64,125,147,150,151,159,160,],[39,39,39,39,39,39,39,39,39,39,39,]),'LBRACKET':([23,34,45,62,64,74,75,76,80,125,147,150,151,159,160,],[45,45,45,45,45,126,127,128,129,45,45,45,45,45,45,]),'LBRACE':([23,32,34,35,45,62,63,64,65,113,115,125,147,150,151,159,160,166,167,184,],[46,71,46,81,46,46,81,46,81,162,162,46,46,46,46,46,46,162,81,162,]),'NOT':([23,28,34,45,49,62,64,90,91,125,147,150,151,159,160,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'TRUE':([23,28,34,45,49,51,62,64,90,91,125,147,150,151,159,160,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FALSE':([23,28,34,45,49,51,62,64,90,91,125,147,150,151,159,160,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NUMBER':([23,28,34,45,49,51,62,64,82,83,84,85,86,87,88,89,90,91,100,101,102,106,125,136,147,150,151,159,160,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'RPAREN':([25,33,47,48,50,52,53,54,55,56,57,58,59,60,61,66,67,69,103,104,105,107,114,116,134,135,137,138,139,140,141,142,143,144,145,152,153,154,155,156,157,158,177,186,],[59,-79,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,107,-83,113,-61,115,155,156,-66,-82,-96,166,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-54,-55,-56,-72,-62,-58,-84,156,-97,]),'COMMA':([33,36,38,39,40,41,42,43,44,47,48,50,52,53,54,55,56,57,58,59,61,67,92,94,96,97,105,107,114,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,180,181,],[-79,-61,-25,-26,-27,-28,-29,-30,-31,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,108,-69,-36,147,-43,149,-66,-82,164,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-47,-48,]),'RBRACKET':([33,36,38,39,40,41,42,43,44,45,47,48,50,52,53,54,55,56,57,58,59,67,92,93,94,96,105,107,126,127,128,129,134,135,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,156,157,178,],[-79,-61,-25,-26,-27,-28,-29,-30,-31,92,-53,-65,-57,-67,-59,-68,-70,-71,-60,-80,-81,-69,-36,146,-38,-43,-66,-82,171,172,173,174,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-37,-42,-54,-55,-56,-72,-62,-58,-39,]),'STRING_TYPE':([35,63,65,167,],[74,74,74,74,]),'NUMBER_TYPE':([35,63,65,167,],[75,75,75,75,]),'BOOLEAN_TYPE':([35,63,65,167,],[76,76,76,76,]),'CHAR_TYPE':([35,63,65,167,],[77,77,77,77,]),'ANY':([35,63,65,167,],[80,80,80,80,]),'AND':([36,43,47,48,50,52,53,54,55,56,57,66,67,103,105,134,135,137,138,139,140,141,142,143,144,145,152,153,154,155,156,157,],[-69,90,-53,-65,-57,-67,-59,-68,-70,-71,-60,90,-69,90,-66,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-54,-55,-56,-72,-62,-58,]),'OR':([36,43,47,48,50,52,53,54,55,56,57,66,67,103,105,134,135,137,138,139,140,141,142,143,144,145,152,153,154,155,156,157,],[-69,91,-53,-65,-57,-67,-59,-68,-70,-71,-60,91,-69,91,-66,-51,-61,-52,-73,-74,-75,-76,-77,-78,-63,-64,-54,-55,-56,-72,-62,-58,]),'POWER':([36,53,57,67,135,156,],[-61,106,-60,-61,-61,-62,]),'TIMES':([36,47,50,53,57,67,134,135,137,152,153,154,156,157,],[-61,100,-57,-59,-60,-61,100,-61,100,-54,-55,-56,-62,-58,]),'DIVIDE':([36,47,50,53,57,67,134,135,137,152,153,154,156,157,],[-61,101,-57,-59,-60,-61,101,-61,101,-54,-55,-56,-62,-58,]),'MODULE':([36,47,50,53,57,67,134,135,137,152,153,154,156,157,],[-61,102,-57,-59,-60,-61,102,-61,102,-54,-55,-56,-62,-58,]),'PLUS':([36,42,47,50,53,57,67,68,104,134,135,137,138,139,140,141,142,143,152,153,154,156,157,177,],[-61,82,-53,-57,-59,-60,-61,82,82,-51,-61,-52,82,82,82,82,82,82,-54,-55,-56,-62,-58,82,]),'MINUS':([36,42,47,50,53,57,67,68,104,134,135,137,138,139,140,141,142,143,152,153,154,156,157,177,],[-61,83,-53,-57,-59,-60,-61,83,83,-51,-61,-52,83,83,83,83,83,83,-54,-55,-56,-62,-58,83,]),'EQEQ':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,84,-53,-57,-59,-60,-61,84,84,-51,-61,-52,-54,-55,-56,-62,-58,]),'NOTEQ':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,85,-53,-57,-59,-60,-61,85,85,-51,-61,-52,-54,-55,-56,-62,-58,]),'GT':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,86,-53,-57,-59,-60,-61,86,86,-51,-61,-52,-54,-55,-56,-62,-58,]),'LT':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,87,-53,-57,-59,-60,-61,87,87,-51,-61,-52,-54,-55,-56,-62,-58,]),'GE':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,88,-53,-57,-59,-60,-61,88,88,-51,-61,-52,-54,-55,-56,-62,-58,]),'LE':([36,42,47,50,53,57,67,68,104,134,135,137,152,153,154,156,157,],[-61,89,-53,-57,-59,-60,-61,89,89,-51,-61,-52,-54,-55,-56,-62,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,162,],[2,18,185,]),'statement':([0,3,113,115,162,166,184,],[3,3,163,163,3,163,163,]),'assignment':([0,3,71,113,115,121,162,166,184,],[4,4,122,4,4,122,4,4,4,]),'expression':([0,3,16,23,25,34,45,62,64,108,113,115,125,147,150,151,159,160,162,166,184,],[5,5,30,44,61,44,44,44,44,61,5,5,44,44,44,44,44,44,5,5,5,]),'if_statement':([0,3,113,115,162,166,184,],[6,6,6,6,6,6,6,]),'function_def':([0,3,71,113,115,121,162,166,184,],[7,7,123,7,7,123,7,7,7,]),'return_statement':([0,3,113,115,162,166,184,],[8,8,8,8,8,8,8,]),'class_declaration':([0,3,113,115,162,166,184,],[9,9,9,9,9,9,9,]),'value':([23,34,45,62,64,125,147,150,151,159,160,],[37,72,94,109,111,170,94,180,181,182,183,]),'array':([23,34,45,62,64,125,147,150,151,159,160,],[40,40,40,40,40,40,40,40,40,40,40,]),'object_literal':([23,34,45,62,64,125,147,150,151,159,160,],[41,41,41,41,41,41,41,41,41,41,41,]),'arithmetic_expression':([23,28,34,45,49,51,62,64,84,85,86,87,88,89,90,91,125,136,147,150,151,159,160,],[42,68,42,42,104,68,42,42,138,139,140,141,142,143,68,68,42,177,42,42,42,42,42,]),'logical_expression':([23,28,34,45,49,62,64,125,147,150,151,159,160,],[43,66,43,43,103,43,43,43,43,43,43,43,43,]),'term':([23,28,34,45,49,51,62,64,82,83,84,85,86,87,88,89,90,91,125,136,147,150,151,159,160,],[47,47,47,47,47,47,47,47,134,137,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'logical_term':([23,28,34,45,49,62,64,90,91,125,147,150,151,159,160,],[48,48,48,48,48,48,48,144,145,48,48,48,48,48,48,]),'factor':([23,28,34,45,49,51,62,64,82,83,84,85,86,87,88,89,90,91,100,101,102,106,125,136,147,150,151,159,160,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,152,153,154,157,50,50,50,50,50,50,50,]),'logical_factor':([23,28,34,45,49,51,62,64,90,91,125,147,150,151,159,160,],[52,52,52,52,52,105,52,52,52,52,52,52,52,52,52,52,]),'atom':([23,28,34,45,49,51,62,64,82,83,84,85,86,87,88,89,90,91,100,101,102,106,125,136,147,150,151,159,160,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'comparison_expression':([23,28,34,45,49,51,62,64,90,91,125,147,150,151,159,160,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'argument_list':([25,108,],[60,158,]),'data_type':([35,63,65,167,],[73,110,112,188,]),'array_type':([35,63,65,167,],[78,78,78,78,]),'object_type_literal':([35,63,65,167,],[79,79,79,79,]),'element_list':([45,147,],[93,178,]),'property_assignment_list':([46,149,],[95,179,]),'property_assignment':([46,149,],[97,97,]),'param_list':([69,164,],[116,186,]),'class_body':([71,],[118,]),'class_member_list':([71,121,],[119,169,]),'empty':([71,],[120,]),'class_member':([71,121,],[121,121,]),'property':([71,81,121,176,],[124,132,124,132,]),'property_list':([81,176,],[130,189,]),'statement_block':([113,115,166,184,],[161,165,187,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','sintactico.py',9),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',11),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','sintactico.py',12),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','sintactico.py',14),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','sintactico.py',15),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',16),
  ('statement -> function_def','statement',1,'p_statement','sintactico.py',17),
  ('statement -> return_statement','statement',1,'p_statement','sintactico.py',18),
  ('statement -> class_declaration','statement',1,'p_statement','sintactico.py',19),
  ('assignment -> LET IDENTIFIER EQUALS value','assignment',4,'p_assignment','sintactico.py',23),
  ('assignment -> LET IDENTIFIER COLON data_type EQUALS value','assignment',6,'p_assignment','sintactico.py',24),
  ('assignment -> LET IDENTIFIER COLON data_type','assignment',4,'p_assignment','sintactico.py',25),
  ('assignment -> CONST IDENTIFIER EQUALS value','assignment',4,'p_assignment','sintactico.py',26),
  ('assignment -> CONST IDENTIFIER COLON data_type EQUALS value','assignment',6,'p_assignment','sintactico.py',27),
  ('assignment -> VAR IDENTIFIER EQUALS value','assignment',4,'p_assignment','sintactico.py',28),
  ('assignment -> VAR IDENTIFIER COLON data_type EQUALS value','assignment',6,'p_assignment','sintactico.py',29),
  ('assignment -> VAR IDENTIFIER COLON data_type','assignment',4,'p_assignment','sintactico.py',30),
  ('assignment -> IDENTIFIER EQUALS value','assignment',3,'p_assignment','sintactico.py',31),
  ('data_type -> STRING_TYPE','data_type',1,'p_data_type','sintactico.py',33),
  ('data_type -> NUMBER_TYPE','data_type',1,'p_data_type','sintactico.py',34),
  ('data_type -> BOOLEAN_TYPE','data_type',1,'p_data_type','sintactico.py',35),
  ('data_type -> CHAR_TYPE','data_type',1,'p_data_type','sintactico.py',36),
  ('data_type -> array_type','data_type',1,'p_data_type','sintactico.py',37),
  ('data_type -> object_type_literal','data_type',1,'p_data_type','sintactico.py',38),
  ('value -> STRING','value',1,'p_value','sintactico.py',40),
  ('value -> CHARACTER','value',1,'p_value','sintactico.py',41),
  ('value -> array','value',1,'p_value','sintactico.py',42),
  ('value -> object_literal','value',1,'p_value','sintactico.py',43),
  ('value -> arithmetic_expression','value',1,'p_value','sintactico.py',44),
  ('value -> logical_expression','value',1,'p_value','sintactico.py',45),
  ('value -> expression','value',1,'p_value','sintactico.py',46),
  ('array_type -> NUMBER_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',50),
  ('array_type -> STRING_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',51),
  ('array_type -> BOOLEAN_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',52),
  ('array_type -> ANY LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',53),
  ('array -> LBRACKET RBRACKET','array',2,'p_array','sintactico.py',55),
  ('array -> LBRACKET element_list RBRACKET','array',3,'p_array','sintactico.py',56),
  ('element_list -> value','element_list',1,'p_element_list','sintactico.py',58),
  ('element_list -> value COMMA element_list','element_list',3,'p_element_list','sintactico.py',59),
  ('object_type_literal -> LBRACE property_list RBRACE','object_type_literal',3,'p_object_type_literal','sintactico.py',63),
  ('object_type_literal -> LBRACE RBRACE','object_type_literal',2,'p_object_type_literal','sintactico.py',64),
  ('object_literal -> LBRACE property_assignment_list RBRACE','object_literal',3,'p_object_literal','sintactico.py',66),
  ('object_literal -> LBRACE RBRACE','object_literal',2,'p_object_literal','sintactico.py',67),
  ('property -> IDENTIFIER COLON data_type','property',3,'p_property','sintactico.py',70),
  ('property_assignment_list -> property_assignment','property_assignment_list',1,'p_property_assignment_list','sintactico.py',72),
  ('property_assignment_list -> property_assignment COMMA property_assignment_list','property_assignment_list',3,'p_property_assignment_list','sintactico.py',73),
  ('property_assignment -> IDENTIFIER COLON value','property_assignment',3,'p_property_assignment','sintactico.py',75),
  ('property_assignment -> STRING COLON value','property_assignment',3,'p_property_assignment','sintactico.py',76),
  ('property_list -> property','property_list',1,'p_property_list','sintactico.py',78),
  ('property_list -> property SEMICOLON property_list','property_list',3,'p_property_list','sintactico.py',79),
  ('arithmetic_expression -> arithmetic_expression PLUS term','arithmetic_expression',3,'p_expression_plus','sintactico.py',96),
  ('arithmetic_expression -> arithmetic_expression MINUS term','arithmetic_expression',3,'p_expression_minus','sintactico.py',98),
  ('arithmetic_expression -> term','arithmetic_expression',1,'p_expression_term','sintactico.py',100),
  ('term -> term TIMES factor','term',3,'p_term_times','sintactico.py',103),
  ('term -> term DIVIDE factor','term',3,'p_term_div','sintactico.py',105),
  ('term -> term MODULE factor','term',3,'p_term_module','sintactico.py',107),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',109),
  ('factor -> atom POWER factor','factor',3,'p_factor_power','sintactico.py',112),
  ('factor -> atom','factor',1,'p_factor_atom','sintactico.py',114),
  ('atom -> NUMBER','atom',1,'p_atom','sintactico.py',116),
  ('atom -> IDENTIFIER','atom',1,'p_atom','sintactico.py',117),
  ('atom -> LPAREN arithmetic_expression RPAREN','atom',3,'p_atom','sintactico.py',118),
  ('logical_expression -> logical_expression AND logical_term','logical_expression',3,'p_logical_expression','sintactico.py',122),
  ('logical_expression -> logical_expression OR logical_term','logical_expression',3,'p_logical_expression','sintactico.py',123),
  ('logical_expression -> logical_term','logical_expression',1,'p_logical_expression','sintactico.py',124),
  ('logical_term -> NOT logical_factor','logical_term',2,'p_logical_term','sintactico.py',126),
  ('logical_term -> logical_factor','logical_term',1,'p_logical_term','sintactico.py',127),
  ('logical_factor -> comparison_expression','logical_factor',1,'p_logical_factor','sintactico.py',129),
  ('logical_factor -> IDENTIFIER','logical_factor',1,'p_logical_factor','sintactico.py',130),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','sintactico.py',131),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','sintactico.py',132),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','sintactico.py',133),
  ('comparison_expression -> arithmetic_expression EQEQ arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',135),
  ('comparison_expression -> arithmetic_expression NOTEQ arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',136),
  ('comparison_expression -> arithmetic_expression GT arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',137),
  ('comparison_expression -> arithmetic_expression LT arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',138),
  ('comparison_expression -> arithmetic_expression GE arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',139),
  ('comparison_expression -> arithmetic_expression LE arithmetic_expression','comparison_expression',3,'p_comparison_expression','sintactico.py',140),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_member_access','sintactico.py',143),
  ('expression -> IDENTIFIER DOT IDENTIFIER','expression',3,'p_member_access','sintactico.py',144),
  ('expression -> IDENTIFIER LPAREN RPAREN','expression',3,'p_function_call','sintactico.py',146),
  ('expression -> IDENTIFIER LPAREN argument_list RPAREN','expression',4,'p_function_call','sintactico.py',147),
  ('argument_list -> expression','argument_list',1,'p_argument_list','sintactico.py',149),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','sintactico.py',150),
  ('class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_declaration',5,'p_class_declaration','sintactico.py',156),
  ('class_body -> class_member_list','class_body',1,'p_class_body','sintactico.py',160),
  ('class_body -> empty','class_body',1,'p_class_body','sintactico.py',161),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','sintactico.py',165),
  ('class_member_list -> class_member class_member_list','class_member_list',2,'p_class_member_list','sintactico.py',166),
  ('class_member -> assignment','class_member',1,'p_class_member','sintactico.py',170),
  ('class_member -> function_def','class_member',1,'p_class_member','sintactico.py',171),
  ('class_member -> property','class_member',1,'p_class_member','sintactico.py',172),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',176),
  ('function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block','function_def',5,'p_function_def','sintactico.py',180),
  ('function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block','function_def',6,'p_function_def','sintactico.py',181),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','sintactico.py',184),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','sintactico.py',185),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintactico.py',188),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','sintactico.py',191),
  ('statement_block -> statement','statement_block',1,'p_statement_block','sintactico.py',192),
  ('if_statement -> IF LPAREN logical_expression RPAREN statement_block','if_statement',5,'p_if_statement','sintactico.py',196),
  ('if_statement -> IF LPAREN logical_expression RPAREN statement_block ELSE statement_block','if_statement',7,'p_if_statement','sintactico.py',197),
]
