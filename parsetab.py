
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ANY ARROW BACKTICK BOOLEAN_TYPE BREAK CASE CHARACTER CHAR_TYPE CLASS COLON COMMA CONST CONSTRUCTOR DEFAULT DIVIDE DOLLAR DOT ELSE EQEQ EQUALS FOR FUNCTION GE GT IDENTIFIER IF INTERFACE LBRACE LBRACKET LE LET LPAREN LT MINUS MODULE NOT NOTEQ NUMBER NUMBER_TYPE OROR PIPE PLUS POWER PRIVATE PROTECTED PUBLIC QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRING_TYPE SWITCH THIS TIMES TYPE TYPEOF VAR VOID WHILEassignment : LET IDENTIFIER EQUALS value SEMICOLON \n                    | LET IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | LET IDENTIFIER COLON data_type SEMICOLON\n                    | CONST IDENTIFIER EQUALS value SEMICOLON\n                    | CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | VAR IDENTIFIER EQUALS value SEMICOLON\n                    | VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | VAR IDENTIFIER COLON data_type SEMICOLONstatement : assignment\n                    | expression SEMICOLON\n                    | if_statement\n                    | print\n                    | input\n                    | class_declarationstatement_block : LBRACE statement_list RBRACE\n                            | statementstatement_list : statement\n                        | statement statement_listif_statement : IF LPAREN expression RPAREN statement_block\n                        | IF LPAREN expression RPAREN statement_block ELSE statement_blockdata_type : STRING_TYPE\n                    | NUMBER_TYPE\n                    | BOOLEAN_TYPE\n                    | CHAR_TYPE\n                    | array_typebody : sentence\n                | sentence bodysentence : assignment\n                    | expression expression : expression PLUS termexpression : expression MINUS termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERvalue : NUMBER\n                | STRING\n                | CHARACTER\n                | IDENTIFIER array : LBRACKET RBRACKET\n                | LBRACKET element_list RBRACKETelement_list : value\n                        | value COMMA element_listarray_type : NUMBER_TYPE LBRACKET RBRACKET\n                    | STRING_TYPE LBRACKET RBRACKET\n                    | BOOLEAN_TYPE LBRACKET RBRACKET\n                    | ANY LBRACKET RBRACKETexpression : valueprint : IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLONinput : IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLONexpression : expression AND expression\n                  | expression OROR expression\n                  | NOT expression\n                  | expression EQEQ expression\n                  | expression NOTEQ expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expressionempty :class_declaration : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body : property\n                  | emptyproperty : IDENTIFIER COLON data_type SEMICOLONprogram : statement_list'
    
_lr_action_items = {'LET':([0,3,4,6,7,8,9,22,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[10,10,-9,-11,-12,-13,-14,-10,10,-1,-3,-4,-6,-8,-19,10,-16,-61,10,-2,-49,-50,-5,-7,-20,-15,]),'CONST':([0,3,4,6,7,8,9,22,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[13,13,-9,-11,-12,-13,-14,-10,13,-1,-3,-4,-6,-8,-19,13,-16,-61,13,-2,-49,-50,-5,-7,-20,-15,]),'VAR':([0,3,4,6,7,8,9,22,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[14,14,-9,-11,-12,-13,-14,-10,14,-1,-3,-4,-6,-8,-19,14,-16,-61,14,-2,-49,-50,-5,-7,-20,-15,]),'NOT':([0,3,4,6,7,8,9,15,22,25,26,27,28,29,30,31,32,40,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[15,15,-9,-11,-12,-13,-14,15,-10,15,15,15,15,15,15,15,15,15,15,-1,-3,-4,-6,-8,-19,15,-16,-61,15,-2,-49,-50,-5,-7,-20,-15,]),'IF':([0,3,4,6,7,8,9,22,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[16,16,-9,-11,-12,-13,-14,-10,16,-1,-3,-4,-6,-8,-19,16,-16,-61,16,-2,-49,-50,-5,-7,-20,-15,]),'IDENTIFIER':([0,3,4,6,7,8,9,10,13,14,15,17,22,25,26,27,28,29,30,31,32,34,35,40,54,58,60,63,74,75,80,87,88,89,96,97,98,99,100,101,102,103,105,115,118,119,120,121,122,123,124,],[11,11,-9,-11,-12,-13,-14,33,36,37,39,41,-10,39,39,39,39,39,39,39,39,56,57,39,39,39,39,81,39,39,11,-1,39,-3,-4,39,-6,39,-8,-19,11,-16,-61,11,-2,-49,-50,-5,-7,-20,-15,]),'CLASS':([0,3,4,6,7,8,9,22,80,87,89,96,98,100,101,102,103,105,115,118,119,120,121,122,123,124,],[17,17,-9,-11,-12,-13,-14,-10,17,-1,-3,-4,-6,-8,-19,17,-16,-61,17,-2,-49,-50,-5,-7,-20,-15,]),'NUMBER':([0,3,4,6,7,8,9,15,22,23,24,25,26,27,28,29,30,31,32,40,54,58,60,64,65,74,75,80,87,88,89,96,97,98,99,100,101,102,103,105,115,118,119,120,121,122,123,124,],[18,18,-9,-11,-12,-13,-14,18,-10,44,44,18,18,18,18,18,18,18,18,18,18,18,18,44,44,18,18,18,-1,18,-3,-4,18,-6,18,-8,-19,18,-16,-61,18,-2,-49,-50,-5,-7,-20,-15,]),'STRING':([0,3,4,6,7,8,9,15,22,25,26,27,28,29,30,31,32,40,54,58,60,74,75,80,87,88,89,96,97,98,99,100,101,102,103,105,115,118,119,120,121,122,123,124,],[19,19,-9,-11,-12,-13,-14,19,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-1,19,-3,-4,19,-6,19,-8,-19,19,-16,-61,19,-2,-49,-50,-5,-7,-20,-15,]),'CHARACTER':([0,3,4,6,7,8,9,15,22,25,26,27,28,29,30,31,32,40,54,58,60,74,75,80,87,88,89,96,97,98,99,100,101,102,103,105,115,118,119,120,121,122,123,124,],[20,20,-9,-11,-12,-13,-14,20,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-1,20,-3,-4,20,-6,20,-8,-19,20,-16,-61,20,-2,-49,-50,-5,-7,-20,-15,]),'$end':([1,2,3,4,6,7,8,9,21,22,87,89,96,98,100,101,103,105,118,119,120,121,122,123,124,],[0,-65,-17,-9,-11,-12,-13,-14,-18,-10,-1,-3,-4,-6,-8,-19,-16,-61,-2,-49,-50,-5,-7,-20,-15,]),'RBRACE':([3,4,6,7,8,9,21,22,63,82,83,84,87,89,96,98,100,101,103,105,116,118,119,120,121,122,123,124,125,],[-17,-9,-11,-12,-13,-14,-18,-10,-60,105,-62,-63,-1,-3,-4,-6,-8,-19,-16,-61,124,-2,-49,-50,-5,-7,-20,-15,-64,]),'ELSE':([4,6,7,8,9,22,87,89,96,98,100,101,103,105,118,119,120,121,122,123,124,],[-9,-11,-12,-13,-14,-10,-1,-3,-4,-6,-8,115,-16,-61,-2,-49,-50,-5,-7,-20,-15,]),'SEMICOLON':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,66,67,68,69,70,71,72,76,78,79,85,86,106,107,108,109,110,111,112,113,114,117,],[22,-39,-48,-36,-37,-38,-53,-39,-30,-34,-35,-31,-51,-52,-54,-55,-56,-57,-58,-59,87,89,-21,-22,-23,-24,-25,96,98,100,-32,-33,118,-45,-44,-46,-47,119,120,121,122,125,]),'PLUS':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[23,-39,-48,-36,-37,-38,23,-39,-30,-34,-35,-31,23,23,23,23,23,23,23,23,23,-32,-33,]),'MINUS':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[24,-39,-48,-36,-37,-38,24,-39,-30,-34,-35,-31,24,24,24,24,24,24,24,24,24,-32,-33,]),'AND':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[25,-39,-48,-36,-37,-38,25,-39,-30,-34,-35,-31,25,25,25,25,25,25,25,25,25,-32,-33,]),'OROR':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[26,-39,-48,-36,-37,-38,26,-39,-30,-34,-35,-31,26,26,26,26,26,26,26,26,26,-32,-33,]),'EQEQ':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[27,-39,-48,-36,-37,-38,27,-39,-30,-34,-35,-31,27,27,27,27,27,27,27,27,27,-32,-33,]),'NOTEQ':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[28,-39,-48,-36,-37,-38,28,-39,-30,-34,-35,-31,28,28,28,28,28,28,28,28,28,-32,-33,]),'GT':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[29,-39,-48,-36,-37,-38,29,-39,-30,-34,-35,-31,29,29,29,29,29,29,29,29,29,-32,-33,]),'LT':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[30,-39,-48,-36,-37,-38,30,-39,-30,-34,-35,-31,30,30,30,30,30,30,30,30,30,-32,-33,]),'GE':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[31,-39,-48,-36,-37,-38,31,-39,-30,-34,-35,-31,31,31,31,31,31,31,31,31,31,-32,-33,]),'LE':([5,11,12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,],[32,-39,-48,-36,-37,-38,32,-39,-30,-34,-35,-31,32,32,32,32,32,32,32,32,32,-32,-33,]),'DOT':([11,],[34,]),'EQUALS':([11,33,36,37,67,68,69,70,71,72,77,79,107,108,109,110,],[35,54,58,60,88,-21,-22,-23,-24,-25,97,99,-45,-44,-46,-47,]),'RPAREN':([12,18,19,20,38,39,42,43,44,45,46,47,48,49,50,51,52,53,62,85,86,94,95,],[-48,-36,-37,-38,-53,-39,-30,-34,-35,-31,-51,-52,-54,-55,-56,-57,-58,-59,80,-32,-33,111,112,]),'LPAREN':([16,56,57,],[40,74,75,]),'COLON':([33,36,37,81,],[55,59,61,104,]),'LBRACE':([41,80,115,],[63,102,102,]),'TIMES':([42,43,44,45,85,86,],[64,-34,-35,64,-32,-33,]),'DIVIDE':([42,43,44,45,85,86,],[65,-34,-35,65,-32,-33,]),'STRING_TYPE':([55,59,61,104,],[68,68,68,68,]),'NUMBER_TYPE':([55,59,61,104,],[69,69,69,69,]),'BOOLEAN_TYPE':([55,59,61,104,],[70,70,70,70,]),'CHAR_TYPE':([55,59,61,104,],[71,71,71,71,]),'ANY':([55,59,61,104,],[73,73,73,73,]),'LBRACKET':([68,69,70,73,],[90,91,92,93,]),'RBRACKET':([90,91,92,93,],[107,108,109,110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,102,],[2,21,116,]),'statement':([0,3,80,102,115,],[3,3,103,3,103,]),'assignment':([0,3,80,102,115,],[4,4,4,4,4,]),'expression':([0,3,15,25,26,27,28,29,30,31,32,40,80,102,115,],[5,5,38,46,47,48,49,50,51,52,53,62,5,5,5,]),'if_statement':([0,3,80,102,115,],[6,6,6,6,6,]),'print':([0,3,80,102,115,],[7,7,7,7,7,]),'input':([0,3,80,102,115,],[8,8,8,8,8,]),'class_declaration':([0,3,80,102,115,],[9,9,9,9,9,]),'value':([0,3,15,25,26,27,28,29,30,31,32,40,54,58,60,74,75,80,88,97,99,102,115,],[12,12,12,12,12,12,12,12,12,12,12,12,66,76,78,94,95,12,106,113,114,12,12,]),'term':([23,24,],[42,45,]),'factor':([23,24,64,65,],[43,43,85,86,]),'data_type':([55,59,61,104,],[67,77,79,117,]),'array_type':([55,59,61,104,],[72,72,72,72,]),'class_body':([63,],[82,]),'property':([63,],[83,]),'empty':([63,],[84,]),'statement_block':([80,115,],[101,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('assignment -> LET IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',5),
  ('assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',6),
  ('assignment -> LET IDENTIFIER COLON data_type SEMICOLON','assignment',5,'p_assignment','sintactico.py',7),
  ('assignment -> CONST IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',8),
  ('assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',9),
  ('assignment -> VAR IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',10),
  ('assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',11),
  ('assignment -> VAR IDENTIFIER COLON data_type SEMICOLON','assignment',5,'p_assignment','sintactico.py',12),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','sintactico.py',16),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',17),
  ('statement -> print','statement',1,'p_statement','sintactico.py',18),
  ('statement -> input','statement',1,'p_statement','sintactico.py',19),
  ('statement -> class_declaration','statement',1,'p_statement','sintactico.py',20),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','sintactico.py',23),
  ('statement_block -> statement','statement_block',1,'p_statement_block','sintactico.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',27),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','sintactico.py',28),
  ('if_statement -> IF LPAREN expression RPAREN statement_block','if_statement',5,'p_if_statement','sintactico.py',31),
  ('if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block','if_statement',7,'p_if_statement','sintactico.py',32),
  ('data_type -> STRING_TYPE','data_type',1,'p_data_type','sintactico.py',35),
  ('data_type -> NUMBER_TYPE','data_type',1,'p_data_type','sintactico.py',36),
  ('data_type -> BOOLEAN_TYPE','data_type',1,'p_data_type','sintactico.py',37),
  ('data_type -> CHAR_TYPE','data_type',1,'p_data_type','sintactico.py',38),
  ('data_type -> array_type','data_type',1,'p_data_type','sintactico.py',39),
  ('body -> sentence','body',1,'p_body','sintactico.py',42),
  ('body -> sentence body','body',2,'p_body','sintactico.py',43),
  ('sentence -> assignment','sentence',1,'p_sentence','sintactico.py',46),
  ('sentence -> expression','sentence',1,'p_sentence','sintactico.py',47),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintactico.py',50),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintactico.py',53),
  ('term -> term TIMES factor','term',3,'p_term_times','sintactico.py',56),
  ('term -> term DIVIDE factor','term',3,'p_term_div','sintactico.py',59),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',62),
  ('factor -> NUMBER','factor',1,'p_factor_number','sintactico.py',65),
  ('value -> NUMBER','value',1,'p_value','sintactico.py',68),
  ('value -> STRING','value',1,'p_value','sintactico.py',69),
  ('value -> CHARACTER','value',1,'p_value','sintactico.py',70),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',71),
  ('array -> LBRACKET RBRACKET','array',2,'p_array','sintactico.py',74),
  ('array -> LBRACKET element_list RBRACKET','array',3,'p_array','sintactico.py',75),
  ('element_list -> value','element_list',1,'p_element_list','sintactico.py',78),
  ('element_list -> value COMMA element_list','element_list',3,'p_element_list','sintactico.py',79),
  ('array_type -> NUMBER_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',82),
  ('array_type -> STRING_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',83),
  ('array_type -> BOOLEAN_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',84),
  ('array_type -> ANY LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',85),
  ('expression -> value','expression',1,'p_expression_value','sintactico.py',88),
  ('print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON','print',7,'p_print','sintactico.py',94),
  ('input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON','input',7,'p_input','sintactico.py',97),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','sintactico.py',100),
  ('expression -> expression OROR expression','expression',3,'p_expression_logical','sintactico.py',101),
  ('expression -> NOT expression','expression',2,'p_expression_logical','sintactico.py',102),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_logical','sintactico.py',103),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression_logical','sintactico.py',104),
  ('expression -> expression GT expression','expression',3,'p_expression_logical','sintactico.py',105),
  ('expression -> expression LT expression','expression',3,'p_expression_logical','sintactico.py',106),
  ('expression -> expression GE expression','expression',3,'p_expression_logical','sintactico.py',107),
  ('expression -> expression LE expression','expression',3,'p_expression_logical','sintactico.py',108),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',111),
  ('class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_declaration',5,'p_class_declaration','sintactico.py',115),
  ('class_body -> property','class_body',1,'p_class_body','sintactico.py',118),
  ('class_body -> empty','class_body',1,'p_class_body','sintactico.py',119),
  ('property -> IDENTIFIER COLON data_type SEMICOLON','property',4,'p_property','sintactico.py',122),
  ('program -> statement_list','program',1,'p_program','sintactico.py',125),
]
