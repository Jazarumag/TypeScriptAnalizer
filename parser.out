Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BACKTICK
    BREAK
    CASE
    CONSTRUCTOR
    DEFAULT
    DOLLAR
    DOT
    FOR
    INTERFACE
    MODULE
    PIPE
    POWER
    PRIVATE
    PROTECTED
    PUBLIC
    QUESTION
    SWITCH
    THIS
    TYPE
    TYPEOF
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     assignment -> LET IDENTIFIER EQUALS value SEMICOLON
Rule 2     assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 3     assignment -> LET IDENTIFIER COLON data_type SEMICOLON
Rule 4     assignment -> CONST IDENTIFIER EQUALS value SEMICOLON
Rule 5     assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 6     assignment -> VAR IDENTIFIER EQUALS value SEMICOLON
Rule 7     assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 8     assignment -> VAR IDENTIFIER COLON data_type SEMICOLON
Rule 9     statement -> assignment
Rule 10    statement -> expression SEMICOLON
Rule 11    statement -> if_statement
Rule 12    statement -> print_statement
Rule 13    statement -> function_def
Rule 14    statement -> return_statement
Rule 15    statement_block -> LBRACE statement_list RBRACE
Rule 16    statement_block -> statement
Rule 17    statement_list -> statement
Rule 18    statement_list -> statement statement_list
Rule 19    if_statement -> IF LPAREN expression RPAREN statement_block
Rule 20    if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block
Rule 21    print_statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 22    factor -> INPUT LPAREN RPAREN
Rule 23    factor -> INPUT LPAREN STRING RPAREN
Rule 24    expression -> expression AND expression
Rule 25    expression -> expression OR expression
Rule 26    expression -> NOT expression
Rule 27    expression -> expression EQEQ expression
Rule 28    expression -> expression NOTEQ expression
Rule 29    expression -> expression LT expression
Rule 30    expression -> expression GT expression
Rule 31    expression -> expression LE expression
Rule 32    expression -> expression GE expression
Rule 33    function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block
Rule 34    function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
Rule 35    param_list -> IDENTIFIER
Rule 36    param_list -> IDENTIFIER COMMA param_list
Rule 37    return_statement -> RETURN expression SEMICOLON
Rule 38    class_def -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 39    class_body -> class_member
Rule 40    class_body -> class_member class_body
Rule 41    class_member -> assignment
Rule 42    class_member -> function_def
Rule 43    data_type -> STRING_TYPE
Rule 44    data_type -> NUMBER_TYPE
Rule 45    data_type -> BOOLEAN_TYPE
Rule 46    data_type -> CHAR_TYPE
Rule 47    data_type -> array_type
Rule 48    body -> sentence
Rule 49    body -> sentence body
Rule 50    sentence -> assignment
Rule 51    sentence -> expression
Rule 52    expression -> expression PLUS term
Rule 53    expression -> expression MINUS term
Rule 54    expression -> term
Rule 55    term -> term TIMES factor
Rule 56    term -> term DIVIDE factor
Rule 57    term -> factor
Rule 58    factor -> NUMBER
Rule 59    value -> NUMBER
Rule 60    value -> STRING
Rule 61    value -> CHARACTER
Rule 62    value -> IDENTIFIER
Rule 63    value -> INPUT LPAREN STRING RPAREN
Rule 64    array -> LBRACKET RBRACKET
Rule 65    array -> LBRACKET element_list RBRACKET
Rule 66    element_list -> value
Rule 67    element_list -> value COMMA element_list
Rule 68    array_type -> NUMBER_TYPE LBRACKET RBRACKET
Rule 69    array_type -> STRING_TYPE LBRACKET RBRACKET
Rule 70    array_type -> BOOLEAN_TYPE LBRACKET RBRACKET
Rule 71    array_type -> ANY LBRACKET RBRACKET
Rule 72    program -> statement_list

Terminals, with rules where they appear

AND                  : 24
ANY                  : 71
ARROW                : 
BACKTICK             : 
BOOLEAN_TYPE         : 45 70
BREAK                : 
CASE                 : 
CHARACTER            : 61
CHAR_TYPE            : 46
CLASS                : 38
COLON                : 2 3 5 7 8
COMMA                : 36 67
CONST                : 4 5
CONSTRUCTOR          : 
DEFAULT              : 
DIVIDE               : 56
DOLLAR               : 
DOT                  : 
ELSE                 : 20
EQEQ                 : 27
EQUALS               : 1 2 4 5 6 7
FOR                  : 
FUNCTION             : 33 34
GE                   : 32
GT                   : 30
IDENTIFIER           : 1 2 3 4 5 6 7 8 33 34 35 36 38 62
IF                   : 19 20
INPUT                : 22 23 63
INTERFACE            : 
LBRACE               : 15 38
LBRACKET             : 64 65 68 69 70 71
LE                   : 31
LET                  : 1 2 3
LPAREN               : 19 20 21 22 23 33 34 63
LT                   : 29
MINUS                : 53
MODULE               : 
NOT                  : 26
NOTEQ                : 28
NUMBER               : 58 59
NUMBER_TYPE          : 44 68
OR                   : 25
PIPE                 : 
PLUS                 : 52
POWER                : 
PRINT                : 21
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTION             : 
RBRACE               : 15 38
RBRACKET             : 64 65 68 69 70 71
RETURN               : 37
RPAREN               : 19 20 21 22 23 33 34 63
SEMICOLON            : 1 2 3 4 5 6 7 8 10 21 37
STRING               : 23 60 63
STRING_TYPE          : 43 69
SWITCH               : 
THIS                 : 
TIMES                : 55
TYPE                 : 
TYPEOF               : 
VAR                  : 6 7 8
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

array                : 
array_type           : 47
assignment           : 9 41 50
body                 : 49
class_body           : 38 40
class_def            : 
class_member         : 39 40
data_type            : 2 3 5 7 8
element_list         : 65 67
expression           : 10 19 20 21 24 24 25 25 26 27 27 28 28 29 29 30 30 31 31 32 32 37 51 52 53
factor               : 55 56 57
function_def         : 13 42
if_statement         : 11
param_list           : 34 36
print_statement      : 12
program              : 0
return_statement     : 14
sentence             : 48 49
statement            : 16 17 18
statement_block      : 19 20 20 33 34
statement_list       : 15 18 72
term                 : 52 53 54 55 56
value                : 1 2 4 5 6 7 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (72) program -> . statement_list
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (72) program -> statement_list .

    $end            reduce using rule 72 (program -> statement_list .)


state 3

    (17) statement_list -> statement .
    (18) statement_list -> statement . statement_list
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    $end            reduce using rule 17 (statement_list -> statement .)
    RBRACE          reduce using rule 17 (statement_list -> statement .)
    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    statement                      shift and go to state 3
    statement_list                 shift and go to state 22
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 4

    (9) statement -> assignment .

    LET             reduce using rule 9 (statement -> assignment .)
    CONST           reduce using rule 9 (statement -> assignment .)
    VAR             reduce using rule 9 (statement -> assignment .)
    NOT             reduce using rule 9 (statement -> assignment .)
    IF              reduce using rule 9 (statement -> assignment .)
    PRINT           reduce using rule 9 (statement -> assignment .)
    FUNCTION        reduce using rule 9 (statement -> assignment .)
    RETURN          reduce using rule 9 (statement -> assignment .)
    INPUT           reduce using rule 9 (statement -> assignment .)
    NUMBER          reduce using rule 9 (statement -> assignment .)
    $end            reduce using rule 9 (statement -> assignment .)
    RBRACE          reduce using rule 9 (statement -> assignment .)
    ELSE            reduce using rule 9 (statement -> assignment .)


state 5

    (10) statement -> expression . SEMICOLON
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 6

    (11) statement -> if_statement .

    LET             reduce using rule 11 (statement -> if_statement .)
    CONST           reduce using rule 11 (statement -> if_statement .)
    VAR             reduce using rule 11 (statement -> if_statement .)
    NOT             reduce using rule 11 (statement -> if_statement .)
    IF              reduce using rule 11 (statement -> if_statement .)
    PRINT           reduce using rule 11 (statement -> if_statement .)
    FUNCTION        reduce using rule 11 (statement -> if_statement .)
    RETURN          reduce using rule 11 (statement -> if_statement .)
    INPUT           reduce using rule 11 (statement -> if_statement .)
    NUMBER          reduce using rule 11 (statement -> if_statement .)
    $end            reduce using rule 11 (statement -> if_statement .)
    RBRACE          reduce using rule 11 (statement -> if_statement .)
    ELSE            reduce using rule 11 (statement -> if_statement .)


state 7

    (12) statement -> print_statement .

    LET             reduce using rule 12 (statement -> print_statement .)
    CONST           reduce using rule 12 (statement -> print_statement .)
    VAR             reduce using rule 12 (statement -> print_statement .)
    NOT             reduce using rule 12 (statement -> print_statement .)
    IF              reduce using rule 12 (statement -> print_statement .)
    PRINT           reduce using rule 12 (statement -> print_statement .)
    FUNCTION        reduce using rule 12 (statement -> print_statement .)
    RETURN          reduce using rule 12 (statement -> print_statement .)
    INPUT           reduce using rule 12 (statement -> print_statement .)
    NUMBER          reduce using rule 12 (statement -> print_statement .)
    $end            reduce using rule 12 (statement -> print_statement .)
    RBRACE          reduce using rule 12 (statement -> print_statement .)
    ELSE            reduce using rule 12 (statement -> print_statement .)


state 8

    (13) statement -> function_def .

    LET             reduce using rule 13 (statement -> function_def .)
    CONST           reduce using rule 13 (statement -> function_def .)
    VAR             reduce using rule 13 (statement -> function_def .)
    NOT             reduce using rule 13 (statement -> function_def .)
    IF              reduce using rule 13 (statement -> function_def .)
    PRINT           reduce using rule 13 (statement -> function_def .)
    FUNCTION        reduce using rule 13 (statement -> function_def .)
    RETURN          reduce using rule 13 (statement -> function_def .)
    INPUT           reduce using rule 13 (statement -> function_def .)
    NUMBER          reduce using rule 13 (statement -> function_def .)
    $end            reduce using rule 13 (statement -> function_def .)
    RBRACE          reduce using rule 13 (statement -> function_def .)
    ELSE            reduce using rule 13 (statement -> function_def .)


state 9

    (14) statement -> return_statement .

    LET             reduce using rule 14 (statement -> return_statement .)
    CONST           reduce using rule 14 (statement -> return_statement .)
    VAR             reduce using rule 14 (statement -> return_statement .)
    NOT             reduce using rule 14 (statement -> return_statement .)
    IF              reduce using rule 14 (statement -> return_statement .)
    PRINT           reduce using rule 14 (statement -> return_statement .)
    FUNCTION        reduce using rule 14 (statement -> return_statement .)
    RETURN          reduce using rule 14 (statement -> return_statement .)
    INPUT           reduce using rule 14 (statement -> return_statement .)
    NUMBER          reduce using rule 14 (statement -> return_statement .)
    $end            reduce using rule 14 (statement -> return_statement .)
    RBRACE          reduce using rule 14 (statement -> return_statement .)
    ELSE            reduce using rule 14 (statement -> return_statement .)


state 10

    (1) assignment -> LET . IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> LET . IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> LET . IDENTIFIER COLON data_type SEMICOLON

    IDENTIFIER      shift and go to state 34


state 11

    (4) assignment -> CONST . IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> CONST . IDENTIFIER COLON data_type EQUALS value SEMICOLON

    IDENTIFIER      shift and go to state 35


state 12

    (6) assignment -> VAR . IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> VAR . IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> VAR . IDENTIFIER COLON data_type SEMICOLON

    IDENTIFIER      shift and go to state 36


state 13

    (26) expression -> NOT . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 37
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 14

    (54) expression -> term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 54 (expression -> term .)
    AND             reduce using rule 54 (expression -> term .)
    OR              reduce using rule 54 (expression -> term .)
    EQEQ            reduce using rule 54 (expression -> term .)
    NOTEQ           reduce using rule 54 (expression -> term .)
    LT              reduce using rule 54 (expression -> term .)
    GT              reduce using rule 54 (expression -> term .)
    LE              reduce using rule 54 (expression -> term .)
    GE              reduce using rule 54 (expression -> term .)
    PLUS            reduce using rule 54 (expression -> term .)
    MINUS           reduce using rule 54 (expression -> term .)
    RPAREN          reduce using rule 54 (expression -> term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39


state 15

    (19) if_statement -> IF . LPAREN expression RPAREN statement_block
    (20) if_statement -> IF . LPAREN expression RPAREN statement_block ELSE statement_block

    LPAREN          shift and go to state 40


state 16

    (21) print_statement -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 41


state 17

    (33) function_def -> FUNCTION . IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> FUNCTION . IDENTIFIER LPAREN param_list RPAREN statement_block

    IDENTIFIER      shift and go to state 42


state 18

    (37) return_statement -> RETURN . expression SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 43
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 19

    (57) term -> factor .

    TIMES           reduce using rule 57 (term -> factor .)
    DIVIDE          reduce using rule 57 (term -> factor .)
    SEMICOLON       reduce using rule 57 (term -> factor .)
    AND             reduce using rule 57 (term -> factor .)
    OR              reduce using rule 57 (term -> factor .)
    EQEQ            reduce using rule 57 (term -> factor .)
    NOTEQ           reduce using rule 57 (term -> factor .)
    LT              reduce using rule 57 (term -> factor .)
    GT              reduce using rule 57 (term -> factor .)
    LE              reduce using rule 57 (term -> factor .)
    GE              reduce using rule 57 (term -> factor .)
    PLUS            reduce using rule 57 (term -> factor .)
    MINUS           reduce using rule 57 (term -> factor .)
    RPAREN          reduce using rule 57 (term -> factor .)


state 20

    (22) factor -> INPUT . LPAREN RPAREN
    (23) factor -> INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 44


state 21

    (58) factor -> NUMBER .

    TIMES           reduce using rule 58 (factor -> NUMBER .)
    DIVIDE          reduce using rule 58 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 58 (factor -> NUMBER .)
    AND             reduce using rule 58 (factor -> NUMBER .)
    OR              reduce using rule 58 (factor -> NUMBER .)
    EQEQ            reduce using rule 58 (factor -> NUMBER .)
    NOTEQ           reduce using rule 58 (factor -> NUMBER .)
    LT              reduce using rule 58 (factor -> NUMBER .)
    GT              reduce using rule 58 (factor -> NUMBER .)
    LE              reduce using rule 58 (factor -> NUMBER .)
    GE              reduce using rule 58 (factor -> NUMBER .)
    PLUS            reduce using rule 58 (factor -> NUMBER .)
    MINUS           reduce using rule 58 (factor -> NUMBER .)
    RPAREN          reduce using rule 58 (factor -> NUMBER .)


state 22

    (18) statement_list -> statement statement_list .

    $end            reduce using rule 18 (statement_list -> statement statement_list .)
    RBRACE          reduce using rule 18 (statement_list -> statement statement_list .)


state 23

    (10) statement -> expression SEMICOLON .

    LET             reduce using rule 10 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 10 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 10 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 10 (statement -> expression SEMICOLON .)
    IF              reduce using rule 10 (statement -> expression SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> expression SEMICOLON .)
    INPUT           reduce using rule 10 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> expression SEMICOLON .)
    $end            reduce using rule 10 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> expression SEMICOLON .)


state 24

    (24) expression -> expression AND . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 45
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 25

    (25) expression -> expression OR . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 46
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 26

    (27) expression -> expression EQEQ . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 47
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 27

    (28) expression -> expression NOTEQ . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 48
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 28

    (29) expression -> expression LT . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 49
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 29

    (30) expression -> expression GT . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 50
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 30

    (31) expression -> expression LE . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 51
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 31

    (32) expression -> expression GE . expression
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 52
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 32

    (52) expression -> expression PLUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    term                           shift and go to state 53
    factor                         shift and go to state 19

state 33

    (53) expression -> expression MINUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    term                           shift and go to state 54
    factor                         shift and go to state 19

state 34

    (1) assignment -> LET IDENTIFIER . EQUALS value SEMICOLON
    (2) assignment -> LET IDENTIFIER . COLON data_type EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER . COLON data_type SEMICOLON

    EQUALS          shift and go to state 55
    COLON           shift and go to state 56


state 35

    (4) assignment -> CONST IDENTIFIER . EQUALS value SEMICOLON
    (5) assignment -> CONST IDENTIFIER . COLON data_type EQUALS value SEMICOLON

    EQUALS          shift and go to state 57
    COLON           shift and go to state 58


state 36

    (6) assignment -> VAR IDENTIFIER . EQUALS value SEMICOLON
    (7) assignment -> VAR IDENTIFIER . COLON data_type EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER . COLON data_type SEMICOLON

    EQUALS          shift and go to state 59
    COLON           shift and go to state 60


state 37

    (26) expression -> NOT expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 26 (expression -> NOT expression .)
    RPAREN          reduce using rule 26 (expression -> NOT expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 26 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 26 (expression -> NOT expression .) ]
  ! EQEQ            [ reduce using rule 26 (expression -> NOT expression .) ]
  ! NOTEQ           [ reduce using rule 26 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 26 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 26 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 26 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 26 (expression -> NOT expression .) ]
  ! PLUS            [ reduce using rule 26 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> NOT expression .) ]


state 38

    (55) term -> term TIMES . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    factor                         shift and go to state 61

state 39

    (56) term -> term DIVIDE . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    factor                         shift and go to state 62

state 40

    (19) if_statement -> IF LPAREN . expression RPAREN statement_block
    (20) if_statement -> IF LPAREN . expression RPAREN statement_block ELSE statement_block
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 63
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 41

    (21) print_statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    NOT             shift and go to state 13
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 64
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 42

    (33) function_def -> FUNCTION IDENTIFIER . LPAREN RPAREN statement_block
    (34) function_def -> FUNCTION IDENTIFIER . LPAREN param_list RPAREN statement_block

    LPAREN          shift and go to state 65


state 43

    (37) return_statement -> RETURN expression . SEMICOLON
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 66
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 44

    (22) factor -> INPUT LPAREN . RPAREN
    (23) factor -> INPUT LPAREN . STRING RPAREN

    RPAREN          shift and go to state 67
    STRING          shift and go to state 68


state 45

    (24) expression -> expression AND expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 24 (expression -> expression AND expression .)
    RPAREN          reduce using rule 24 (expression -> expression AND expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! EQEQ            [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 24 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> expression AND expression .) ]


state 46

    (25) expression -> expression OR expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 25 (expression -> expression OR expression .)
    RPAREN          reduce using rule 25 (expression -> expression OR expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! EQEQ            [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! NOTEQ           [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 25 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression OR expression .) ]


state 47

    (27) expression -> expression EQEQ expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> expression EQEQ expression .)
    RPAREN          reduce using rule 27 (expression -> expression EQEQ expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! EQEQ            [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! NOTEQ           [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! LE              [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! GE              [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! PLUS            [ reduce using rule 27 (expression -> expression EQEQ expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression EQEQ expression .) ]


state 48

    (28) expression -> expression NOTEQ expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> expression NOTEQ expression .)
    RPAREN          reduce using rule 28 (expression -> expression NOTEQ expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! EQEQ            [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! LT              [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! GT              [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! LE              [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! GE              [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression NOTEQ expression .) ]


state 49

    (29) expression -> expression LT expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression LT expression .)
    RPAREN          reduce using rule 29 (expression -> expression LT expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! EQEQ            [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! NOTEQ           [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 29 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression LT expression .) ]


state 50

    (30) expression -> expression GT expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression GT expression .)
    RPAREN          reduce using rule 30 (expression -> expression GT expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! EQEQ            [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! NOTEQ           [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression GT expression .) ]


state 51

    (31) expression -> expression LE expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 31 (expression -> expression LE expression .)
    RPAREN          reduce using rule 31 (expression -> expression LE expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! EQEQ            [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! NOTEQ           [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 31 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression LE expression .) ]


state 52

    (32) expression -> expression GE expression .
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 32 (expression -> expression GE expression .)
    RPAREN          reduce using rule 32 (expression -> expression GE expression .)
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! AND             [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! EQEQ            [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! NOTEQ           [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 32 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression GE expression .) ]


state 53

    (52) expression -> expression PLUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 52 (expression -> expression PLUS term .)
    AND             reduce using rule 52 (expression -> expression PLUS term .)
    OR              reduce using rule 52 (expression -> expression PLUS term .)
    EQEQ            reduce using rule 52 (expression -> expression PLUS term .)
    NOTEQ           reduce using rule 52 (expression -> expression PLUS term .)
    LT              reduce using rule 52 (expression -> expression PLUS term .)
    GT              reduce using rule 52 (expression -> expression PLUS term .)
    LE              reduce using rule 52 (expression -> expression PLUS term .)
    GE              reduce using rule 52 (expression -> expression PLUS term .)
    PLUS            reduce using rule 52 (expression -> expression PLUS term .)
    MINUS           reduce using rule 52 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 52 (expression -> expression PLUS term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39


state 54

    (53) expression -> expression MINUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 53 (expression -> expression MINUS term .)
    AND             reduce using rule 53 (expression -> expression MINUS term .)
    OR              reduce using rule 53 (expression -> expression MINUS term .)
    EQEQ            reduce using rule 53 (expression -> expression MINUS term .)
    NOTEQ           reduce using rule 53 (expression -> expression MINUS term .)
    LT              reduce using rule 53 (expression -> expression MINUS term .)
    GT              reduce using rule 53 (expression -> expression MINUS term .)
    LE              reduce using rule 53 (expression -> expression MINUS term .)
    GE              reduce using rule 53 (expression -> expression MINUS term .)
    PLUS            reduce using rule 53 (expression -> expression MINUS term .)
    MINUS           reduce using rule 53 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 53 (expression -> expression MINUS term .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39


state 55

    (1) assignment -> LET IDENTIFIER EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 70

state 56

    (2) assignment -> LET IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER COLON . data_type SEMICOLON
    (43) data_type -> . STRING_TYPE
    (44) data_type -> . NUMBER_TYPE
    (45) data_type -> . BOOLEAN_TYPE
    (46) data_type -> . CHAR_TYPE
    (47) data_type -> . array_type
    (68) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (69) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (70) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (71) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 76
    NUMBER_TYPE     shift and go to state 77
    BOOLEAN_TYPE    shift and go to state 78
    CHAR_TYPE       shift and go to state 79
    ANY             shift and go to state 81

    data_type                      shift and go to state 75
    array_type                     shift and go to state 80

state 57

    (4) assignment -> CONST IDENTIFIER EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 82

state 58

    (5) assignment -> CONST IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (43) data_type -> . STRING_TYPE
    (44) data_type -> . NUMBER_TYPE
    (45) data_type -> . BOOLEAN_TYPE
    (46) data_type -> . CHAR_TYPE
    (47) data_type -> . array_type
    (68) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (69) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (70) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (71) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 76
    NUMBER_TYPE     shift and go to state 77
    BOOLEAN_TYPE    shift and go to state 78
    CHAR_TYPE       shift and go to state 79
    ANY             shift and go to state 81

    data_type                      shift and go to state 83
    array_type                     shift and go to state 80

state 59

    (6) assignment -> VAR IDENTIFIER EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 84

state 60

    (7) assignment -> VAR IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER COLON . data_type SEMICOLON
    (43) data_type -> . STRING_TYPE
    (44) data_type -> . NUMBER_TYPE
    (45) data_type -> . BOOLEAN_TYPE
    (46) data_type -> . CHAR_TYPE
    (47) data_type -> . array_type
    (68) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (69) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (70) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (71) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 76
    NUMBER_TYPE     shift and go to state 77
    BOOLEAN_TYPE    shift and go to state 78
    CHAR_TYPE       shift and go to state 79
    ANY             shift and go to state 81

    data_type                      shift and go to state 85
    array_type                     shift and go to state 80

state 61

    (55) term -> term TIMES factor .

    TIMES           reduce using rule 55 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 55 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 55 (term -> term TIMES factor .)
    AND             reduce using rule 55 (term -> term TIMES factor .)
    OR              reduce using rule 55 (term -> term TIMES factor .)
    EQEQ            reduce using rule 55 (term -> term TIMES factor .)
    NOTEQ           reduce using rule 55 (term -> term TIMES factor .)
    LT              reduce using rule 55 (term -> term TIMES factor .)
    GT              reduce using rule 55 (term -> term TIMES factor .)
    LE              reduce using rule 55 (term -> term TIMES factor .)
    GE              reduce using rule 55 (term -> term TIMES factor .)
    PLUS            reduce using rule 55 (term -> term TIMES factor .)
    MINUS           reduce using rule 55 (term -> term TIMES factor .)
    RPAREN          reduce using rule 55 (term -> term TIMES factor .)


state 62

    (56) term -> term DIVIDE factor .

    TIMES           reduce using rule 56 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 56 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 56 (term -> term DIVIDE factor .)
    AND             reduce using rule 56 (term -> term DIVIDE factor .)
    OR              reduce using rule 56 (term -> term DIVIDE factor .)
    EQEQ            reduce using rule 56 (term -> term DIVIDE factor .)
    NOTEQ           reduce using rule 56 (term -> term DIVIDE factor .)
    LT              reduce using rule 56 (term -> term DIVIDE factor .)
    GT              reduce using rule 56 (term -> term DIVIDE factor .)
    LE              reduce using rule 56 (term -> term DIVIDE factor .)
    GE              reduce using rule 56 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 56 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 56 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 56 (term -> term DIVIDE factor .)


state 63

    (19) if_statement -> IF LPAREN expression . RPAREN statement_block
    (20) if_statement -> IF LPAREN expression . RPAREN statement_block ELSE statement_block
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

    RPAREN          shift and go to state 86
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 64

    (21) print_statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (24) expression -> expression . AND expression
    (25) expression -> expression . OR expression
    (27) expression -> expression . EQEQ expression
    (28) expression -> expression . NOTEQ expression
    (29) expression -> expression . LT expression
    (30) expression -> expression . GT expression
    (31) expression -> expression . LE expression
    (32) expression -> expression . GE expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term

    RPAREN          shift and go to state 87
    AND             shift and go to state 24
    OR              shift and go to state 25
    EQEQ            shift and go to state 26
    NOTEQ           shift and go to state 27
    LT              shift and go to state 28
    GT              shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 65

    (33) function_def -> FUNCTION IDENTIFIER LPAREN . RPAREN statement_block
    (34) function_def -> FUNCTION IDENTIFIER LPAREN . param_list RPAREN statement_block
    (35) param_list -> . IDENTIFIER
    (36) param_list -> . IDENTIFIER COMMA param_list

    RPAREN          shift and go to state 89
    IDENTIFIER      shift and go to state 88

    param_list                     shift and go to state 90

state 66

    (37) return_statement -> RETURN expression SEMICOLON .

    LET             reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    INPUT           reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 37 (return_statement -> RETURN expression SEMICOLON .)


state 67

    (22) factor -> INPUT LPAREN RPAREN .

    TIMES           reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    DIVIDE          reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    SEMICOLON       reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    AND             reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    OR              reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    EQEQ            reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    NOTEQ           reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    LT              reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    GT              reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    LE              reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    GE              reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    PLUS            reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    MINUS           reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 22 (factor -> INPUT LPAREN RPAREN .)


state 68

    (23) factor -> INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 91


state 69

    (62) value -> IDENTIFIER .

    SEMICOLON       reduce using rule 62 (value -> IDENTIFIER .)


state 70

    (1) assignment -> LET IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 92


state 71

    (59) value -> NUMBER .

    SEMICOLON       reduce using rule 59 (value -> NUMBER .)


state 72

    (60) value -> STRING .

    SEMICOLON       reduce using rule 60 (value -> STRING .)


state 73

    (61) value -> CHARACTER .

    SEMICOLON       reduce using rule 61 (value -> CHARACTER .)


state 74

    (63) value -> INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 93


state 75

    (2) assignment -> LET IDENTIFIER COLON data_type . EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER COLON data_type . SEMICOLON

    EQUALS          shift and go to state 94
    SEMICOLON       shift and go to state 95


state 76

    (43) data_type -> STRING_TYPE .
    (69) array_type -> STRING_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 43 (data_type -> STRING_TYPE .)
    SEMICOLON       reduce using rule 43 (data_type -> STRING_TYPE .)
    LBRACKET        shift and go to state 96


state 77

    (44) data_type -> NUMBER_TYPE .
    (68) array_type -> NUMBER_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 44 (data_type -> NUMBER_TYPE .)
    SEMICOLON       reduce using rule 44 (data_type -> NUMBER_TYPE .)
    LBRACKET        shift and go to state 97


state 78

    (45) data_type -> BOOLEAN_TYPE .
    (70) array_type -> BOOLEAN_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 45 (data_type -> BOOLEAN_TYPE .)
    SEMICOLON       reduce using rule 45 (data_type -> BOOLEAN_TYPE .)
    LBRACKET        shift and go to state 98


state 79

    (46) data_type -> CHAR_TYPE .

    EQUALS          reduce using rule 46 (data_type -> CHAR_TYPE .)
    SEMICOLON       reduce using rule 46 (data_type -> CHAR_TYPE .)


state 80

    (47) data_type -> array_type .

    EQUALS          reduce using rule 47 (data_type -> array_type .)
    SEMICOLON       reduce using rule 47 (data_type -> array_type .)


state 81

    (71) array_type -> ANY . LBRACKET RBRACKET

    LBRACKET        shift and go to state 99


state 82

    (4) assignment -> CONST IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 100


state 83

    (5) assignment -> CONST IDENTIFIER COLON data_type . EQUALS value SEMICOLON

    EQUALS          shift and go to state 101


state 84

    (6) assignment -> VAR IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 102


state 85

    (7) assignment -> VAR IDENTIFIER COLON data_type . EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER COLON data_type . SEMICOLON

    EQUALS          shift and go to state 103
    SEMICOLON       shift and go to state 104


state 86

    (19) if_statement -> IF LPAREN expression RPAREN . statement_block
    (20) if_statement -> IF LPAREN expression RPAREN . statement_block ELSE statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LBRACE          shift and go to state 106
    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 5
    statement_block                shift and go to state 105
    statement                      shift and go to state 107
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 87

    (21) print_statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 108


state 88

    (35) param_list -> IDENTIFIER .
    (36) param_list -> IDENTIFIER . COMMA param_list

    RPAREN          reduce using rule 35 (param_list -> IDENTIFIER .)
    COMMA           shift and go to state 109


state 89

    (33) function_def -> FUNCTION IDENTIFIER LPAREN RPAREN . statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LBRACE          shift and go to state 106
    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    statement_block                shift and go to state 110
    statement                      shift and go to state 107
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 90

    (34) function_def -> FUNCTION IDENTIFIER LPAREN param_list . RPAREN statement_block

    RPAREN          shift and go to state 111


state 91

    (23) factor -> INPUT LPAREN STRING RPAREN .

    TIMES           reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    DIVIDE          reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    SEMICOLON       reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    AND             reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    OR              reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    EQEQ            reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    NOTEQ           reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    LT              reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    GT              reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    LE              reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    GE              reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    PLUS            reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 23 (factor -> INPUT LPAREN STRING RPAREN .)


state 92

    (1) assignment -> LET IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    PRINT           reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    RETURN          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    INPUT           reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)


state 93

    (63) value -> INPUT LPAREN . STRING RPAREN

    STRING          shift and go to state 112


state 94

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 113

state 95

    (3) assignment -> LET IDENTIFIER COLON data_type SEMICOLON .

    LET             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    CONST           reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    VAR             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    NOT             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    IF              reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    PRINT           reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    FUNCTION        reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    RETURN          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    INPUT           reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    NUMBER          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    $end            reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    RBRACE          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    ELSE            reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)


state 96

    (69) array_type -> STRING_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 114


state 97

    (68) array_type -> NUMBER_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 115


state 98

    (70) array_type -> BOOLEAN_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 116


state 99

    (71) array_type -> ANY LBRACKET . RBRACKET

    RBRACKET        shift and go to state 117


state 100

    (4) assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    PRINT           reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    RETURN          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    INPUT           reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)


state 101

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 118

state 102

    (6) assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    PRINT           reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    RETURN          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    INPUT           reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)


state 103

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (59) value -> . NUMBER
    (60) value -> . STRING
    (61) value -> . CHARACTER
    (62) value -> . IDENTIFIER
    (63) value -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    CHARACTER       shift and go to state 73
    IDENTIFIER      shift and go to state 69
    INPUT           shift and go to state 74

    value                          shift and go to state 119

state 104

    (8) assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .

    LET             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    CONST           reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    VAR             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    NOT             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    IF              reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    PRINT           reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    FUNCTION        reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    RETURN          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    INPUT           reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    NUMBER          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    $end            reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    RBRACE          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    ELSE            reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)


state 105

    (19) if_statement -> IF LPAREN expression RPAREN statement_block .
    (20) if_statement -> IF LPAREN expression RPAREN statement_block . ELSE statement_block

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    CONST           reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    VAR             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    NOT             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    IF              reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    PRINT           reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    FUNCTION        reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    RETURN          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    INPUT           reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    NUMBER          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    $end            reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    RBRACE          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    ELSE            shift and go to state 120

  ! ELSE            [ reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .) ]


state 106

    (15) statement_block -> LBRACE . statement_list RBRACE
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    statement_list                 shift and go to state 121
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 107

    (16) statement_block -> statement .

    ELSE            reduce using rule 16 (statement_block -> statement .)
    LET             reduce using rule 16 (statement_block -> statement .)
    CONST           reduce using rule 16 (statement_block -> statement .)
    VAR             reduce using rule 16 (statement_block -> statement .)
    NOT             reduce using rule 16 (statement_block -> statement .)
    IF              reduce using rule 16 (statement_block -> statement .)
    PRINT           reduce using rule 16 (statement_block -> statement .)
    FUNCTION        reduce using rule 16 (statement_block -> statement .)
    RETURN          reduce using rule 16 (statement_block -> statement .)
    INPUT           reduce using rule 16 (statement_block -> statement .)
    NUMBER          reduce using rule 16 (statement_block -> statement .)
    $end            reduce using rule 16 (statement_block -> statement .)
    RBRACE          reduce using rule 16 (statement_block -> statement .)


state 108

    (21) print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    LET             reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    VAR             reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INPUT           reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 21 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 109

    (36) param_list -> IDENTIFIER COMMA . param_list
    (35) param_list -> . IDENTIFIER
    (36) param_list -> . IDENTIFIER COMMA param_list

    IDENTIFIER      shift and go to state 88

    param_list                     shift and go to state 122

state 110

    (33) function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .

    LET             reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    CONST           reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    VAR             reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    NOT             reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    IF              reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    PRINT           reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    FUNCTION        reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    RETURN          reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    INPUT           reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    NUMBER          reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    $end            reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    RBRACE          reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)
    ELSE            reduce using rule 33 (function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block .)


state 111

    (34) function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN . statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LBRACE          shift and go to state 106
    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    statement_block                shift and go to state 123
    statement                      shift and go to state 107
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 112

    (63) value -> INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 124


state 113

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 125


state 114

    (69) array_type -> STRING_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 69 (array_type -> STRING_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 69 (array_type -> STRING_TYPE LBRACKET RBRACKET .)


state 115

    (68) array_type -> NUMBER_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 68 (array_type -> NUMBER_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 68 (array_type -> NUMBER_TYPE LBRACKET RBRACKET .)


state 116

    (70) array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 70 (array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 70 (array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .)


state 117

    (71) array_type -> ANY LBRACKET RBRACKET .

    EQUALS          reduce using rule 71 (array_type -> ANY LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 71 (array_type -> ANY LBRACKET RBRACKET .)


state 118

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 126


state 119

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 127


state 120

    (20) if_statement -> IF LPAREN expression RPAREN statement_block ELSE . statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print_statement
    (13) statement -> . function_def
    (14) statement -> . return_statement
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (24) expression -> . expression AND expression
    (25) expression -> . expression OR expression
    (26) expression -> . NOT expression
    (27) expression -> . expression EQEQ expression
    (28) expression -> . expression NOTEQ expression
    (29) expression -> . expression LT expression
    (30) expression -> . expression GT expression
    (31) expression -> . expression LE expression
    (32) expression -> . expression GE expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (21) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) function_def -> . FUNCTION IDENTIFIER LPAREN RPAREN statement_block
    (34) function_def -> . FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block
    (37) return_statement -> . RETURN expression SEMICOLON
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (22) factor -> . INPUT LPAREN RPAREN
    (23) factor -> . INPUT LPAREN STRING RPAREN
    (58) factor -> . NUMBER

    LBRACE          shift and go to state 106
    LET             shift and go to state 10
    CONST           shift and go to state 11
    VAR             shift and go to state 12
    NOT             shift and go to state 13
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 18
    INPUT           shift and go to state 20
    NUMBER          shift and go to state 21

    expression                     shift and go to state 5
    statement_block                shift and go to state 128
    statement                      shift and go to state 107
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 6
    print_statement                shift and go to state 7
    function_def                   shift and go to state 8
    return_statement               shift and go to state 9
    term                           shift and go to state 14
    factor                         shift and go to state 19

state 121

    (15) statement_block -> LBRACE statement_list . RBRACE

    RBRACE          shift and go to state 129


state 122

    (36) param_list -> IDENTIFIER COMMA param_list .

    RPAREN          reduce using rule 36 (param_list -> IDENTIFIER COMMA param_list .)


state 123

    (34) function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .

    LET             reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    CONST           reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    VAR             reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    NOT             reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    IF              reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    PRINT           reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    FUNCTION        reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    RETURN          reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    INPUT           reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    NUMBER          reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    $end            reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    RBRACE          reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)
    ELSE            reduce using rule 34 (function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block .)


state 124

    (63) value -> INPUT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 63 (value -> INPUT LPAREN STRING RPAREN .)


state 125

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    PRINT           reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RETURN          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    INPUT           reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 126

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    PRINT           reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RETURN          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    INPUT           reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 127

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    PRINT           reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    FUNCTION        reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RETURN          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    INPUT           reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 128

    (20) if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .

    LET             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    CONST           reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    VAR             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    NOT             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    IF              reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    PRINT           reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    FUNCTION        reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    RETURN          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    INPUT           reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    NUMBER          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    $end            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    RBRACE          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    ELSE            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)


state 129

    (15) statement_block -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    LET             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    INPUT           reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 37 resolved as shift
WARNING: shift/reduce conflict for OR in state 37 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LT in state 37 resolved as shift
WARNING: shift/reduce conflict for GT in state 37 resolved as shift
WARNING: shift/reduce conflict for LE in state 37 resolved as shift
WARNING: shift/reduce conflict for GE in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 45 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for LE in state 45 resolved as shift
WARNING: shift/reduce conflict for GE in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 46 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for LE in state 46 resolved as shift
WARNING: shift/reduce conflict for GE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for LE in state 47 resolved as shift
WARNING: shift/reduce conflict for GE in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LE in state 48 resolved as shift
WARNING: shift/reduce conflict for GE in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LE in state 49 resolved as shift
WARNING: shift/reduce conflict for GE in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 50 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for LE in state 50 resolved as shift
WARNING: shift/reduce conflict for GE in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LE in state 51 resolved as shift
WARNING: shift/reduce conflict for GE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 52 resolved as shift
WARNING: shift/reduce conflict for OR in state 52 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 105 resolved as shift
