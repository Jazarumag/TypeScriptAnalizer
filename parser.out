Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BACKTICK
    BREAK
    CASE
    CONSTRUCTOR
    DEFAULT
    DOLLAR
    FOR
    FUNCTION
    INTERFACE
    MODULE
    PIPE
    POWER
    PRIVATE
    PROTECTED
    PUBLIC
    QUESTION
    RETURN
    SWITCH
    THIS
    TYPE
    TYPEOF
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     assignment -> LET IDENTIFIER EQUALS value SEMICOLON
Rule 2     assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 3     assignment -> LET IDENTIFIER COLON data_type SEMICOLON
Rule 4     assignment -> CONST IDENTIFIER EQUALS value SEMICOLON
Rule 5     assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 6     assignment -> VAR IDENTIFIER EQUALS value SEMICOLON
Rule 7     assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
Rule 8     assignment -> VAR IDENTIFIER COLON data_type SEMICOLON
Rule 9     statement -> assignment
Rule 10    statement -> expression SEMICOLON
Rule 11    statement -> if_statement
Rule 12    statement -> print
Rule 13    statement -> input
Rule 14    statement -> class_declaration
Rule 15    statement_block -> LBRACE statement_list RBRACE
Rule 16    statement_block -> statement
Rule 17    statement_list -> statement
Rule 18    statement_list -> statement statement_list
Rule 19    if_statement -> IF LPAREN expression RPAREN statement_block
Rule 20    if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block
Rule 21    data_type -> STRING_TYPE
Rule 22    data_type -> NUMBER_TYPE
Rule 23    data_type -> BOOLEAN_TYPE
Rule 24    data_type -> CHAR_TYPE
Rule 25    data_type -> array_type
Rule 26    body -> sentence
Rule 27    body -> sentence body
Rule 28    sentence -> assignment
Rule 29    sentence -> expression
Rule 30    expression -> expression PLUS term
Rule 31    expression -> expression MINUS term
Rule 32    term -> term TIMES factor
Rule 33    term -> term DIVIDE factor
Rule 34    term -> factor
Rule 35    factor -> NUMBER
Rule 36    value -> NUMBER
Rule 37    value -> STRING
Rule 38    value -> CHARACTER
Rule 39    value -> IDENTIFIER
Rule 40    array -> LBRACKET RBRACKET
Rule 41    array -> LBRACKET element_list RBRACKET
Rule 42    element_list -> value
Rule 43    element_list -> value COMMA element_list
Rule 44    array_type -> NUMBER_TYPE LBRACKET RBRACKET
Rule 45    array_type -> STRING_TYPE LBRACKET RBRACKET
Rule 46    array_type -> BOOLEAN_TYPE LBRACKET RBRACKET
Rule 47    array_type -> ANY LBRACKET RBRACKET
Rule 48    expression -> value
Rule 49    print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
Rule 50    input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
Rule 51    expression -> expression AND expression
Rule 52    expression -> expression OROR expression
Rule 53    expression -> NOT expression
Rule 54    expression -> expression EQEQ expression
Rule 55    expression -> expression NOTEQ expression
Rule 56    expression -> expression GT expression
Rule 57    expression -> expression LT expression
Rule 58    expression -> expression GE expression
Rule 59    expression -> expression LE expression
Rule 60    empty -> <empty>
Rule 61    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 62    class_body -> property
Rule 63    class_body -> empty
Rule 64    property -> IDENTIFIER COLON data_type SEMICOLON
Rule 65    program -> statement_list

Terminals, with rules where they appear

AND                  : 51
ANY                  : 47
ARROW                : 
BACKTICK             : 
BOOLEAN_TYPE         : 23 46
BREAK                : 
CASE                 : 
CHARACTER            : 38
CHAR_TYPE            : 24
CLASS                : 61
COLON                : 2 3 5 7 8 64
COMMA                : 43
CONST                : 4 5
CONSTRUCTOR          : 
DEFAULT              : 
DIVIDE               : 33
DOLLAR               : 
DOT                  : 49
ELSE                 : 20
EQEQ                 : 54
EQUALS               : 1 2 4 5 6 7 50
FOR                  : 
FUNCTION             : 
GE                   : 58
GT                   : 56
IDENTIFIER           : 1 2 3 4 5 6 7 8 39 49 49 50 50 61 64
IF                   : 19 20
INTERFACE            : 
LBRACE               : 15 61
LBRACKET             : 40 41 44 45 46 47
LE                   : 59
LET                  : 1 2 3
LPAREN               : 19 20 49 50
LT                   : 57
MINUS                : 31
MODULE               : 
NOT                  : 53
NOTEQ                : 55
NUMBER               : 35 36
NUMBER_TYPE          : 22 44
OROR                 : 52
PIPE                 : 
PLUS                 : 30
POWER                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTION             : 
RBRACE               : 15 61
RBRACKET             : 40 41 44 45 46 47
RETURN               : 
RPAREN               : 19 20 49 50
SEMICOLON            : 1 2 3 4 5 6 7 8 10 49 50 64
STRING               : 37
STRING_TYPE          : 21 45
SWITCH               : 
THIS                 : 
TIMES                : 32
TYPE                 : 
TYPEOF               : 
VAR                  : 6 7 8
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

array                : 
array_type           : 25
assignment           : 9 28
body                 : 27
class_body           : 61
class_declaration    : 14
data_type            : 2 3 5 7 8 64
element_list         : 41 43
empty                : 63
expression           : 10 19 20 29 30 31 51 51 52 52 53 54 54 55 55 56 56 57 57 58 58 59 59
factor               : 32 33 34
if_statement         : 11
input                : 13
print                : 12
program              : 0
property             : 62
sentence             : 26 27
statement            : 16 17 18
statement_block      : 19 20 20
statement_list       : 15 18 65
term                 : 30 31 32 33
value                : 1 2 4 5 6 7 42 43 48 49 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (65) program -> . statement_list
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print
    (13) statement -> . input
    (14) statement -> . class_declaration
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (49) print -> . IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> . IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    LET             shift and go to state 10
    CONST           shift and go to state 13
    VAR             shift and go to state 14
    NOT             shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 11
    CLASS           shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print                          shift and go to state 7
    input                          shift and go to state 8
    class_declaration              shift and go to state 9
    value                          shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (65) program -> statement_list .

    $end            reduce using rule 65 (program -> statement_list .)


state 3

    (17) statement_list -> statement .
    (18) statement_list -> statement . statement_list
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print
    (13) statement -> . input
    (14) statement -> . class_declaration
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (49) print -> . IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> . IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    $end            reduce using rule 17 (statement_list -> statement .)
    RBRACE          reduce using rule 17 (statement_list -> statement .)
    LET             shift and go to state 10
    CONST           shift and go to state 13
    VAR             shift and go to state 14
    NOT             shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 11
    CLASS           shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20

    statement                      shift and go to state 3
    statement_list                 shift and go to state 21
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print                          shift and go to state 7
    input                          shift and go to state 8
    class_declaration              shift and go to state 9
    value                          shift and go to state 12

state 4

    (9) statement -> assignment .

    LET             reduce using rule 9 (statement -> assignment .)
    CONST           reduce using rule 9 (statement -> assignment .)
    VAR             reduce using rule 9 (statement -> assignment .)
    NOT             reduce using rule 9 (statement -> assignment .)
    IF              reduce using rule 9 (statement -> assignment .)
    IDENTIFIER      reduce using rule 9 (statement -> assignment .)
    CLASS           reduce using rule 9 (statement -> assignment .)
    NUMBER          reduce using rule 9 (statement -> assignment .)
    STRING          reduce using rule 9 (statement -> assignment .)
    CHARACTER       reduce using rule 9 (statement -> assignment .)
    $end            reduce using rule 9 (statement -> assignment .)
    RBRACE          reduce using rule 9 (statement -> assignment .)
    ELSE            reduce using rule 9 (statement -> assignment .)


state 5

    (10) statement -> expression . SEMICOLON
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

    SEMICOLON       shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32


state 6

    (11) statement -> if_statement .

    LET             reduce using rule 11 (statement -> if_statement .)
    CONST           reduce using rule 11 (statement -> if_statement .)
    VAR             reduce using rule 11 (statement -> if_statement .)
    NOT             reduce using rule 11 (statement -> if_statement .)
    IF              reduce using rule 11 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> if_statement .)
    CLASS           reduce using rule 11 (statement -> if_statement .)
    NUMBER          reduce using rule 11 (statement -> if_statement .)
    STRING          reduce using rule 11 (statement -> if_statement .)
    CHARACTER       reduce using rule 11 (statement -> if_statement .)
    $end            reduce using rule 11 (statement -> if_statement .)
    RBRACE          reduce using rule 11 (statement -> if_statement .)
    ELSE            reduce using rule 11 (statement -> if_statement .)


state 7

    (12) statement -> print .

    LET             reduce using rule 12 (statement -> print .)
    CONST           reduce using rule 12 (statement -> print .)
    VAR             reduce using rule 12 (statement -> print .)
    NOT             reduce using rule 12 (statement -> print .)
    IF              reduce using rule 12 (statement -> print .)
    IDENTIFIER      reduce using rule 12 (statement -> print .)
    CLASS           reduce using rule 12 (statement -> print .)
    NUMBER          reduce using rule 12 (statement -> print .)
    STRING          reduce using rule 12 (statement -> print .)
    CHARACTER       reduce using rule 12 (statement -> print .)
    $end            reduce using rule 12 (statement -> print .)
    RBRACE          reduce using rule 12 (statement -> print .)
    ELSE            reduce using rule 12 (statement -> print .)


state 8

    (13) statement -> input .

    LET             reduce using rule 13 (statement -> input .)
    CONST           reduce using rule 13 (statement -> input .)
    VAR             reduce using rule 13 (statement -> input .)
    NOT             reduce using rule 13 (statement -> input .)
    IF              reduce using rule 13 (statement -> input .)
    IDENTIFIER      reduce using rule 13 (statement -> input .)
    CLASS           reduce using rule 13 (statement -> input .)
    NUMBER          reduce using rule 13 (statement -> input .)
    STRING          reduce using rule 13 (statement -> input .)
    CHARACTER       reduce using rule 13 (statement -> input .)
    $end            reduce using rule 13 (statement -> input .)
    RBRACE          reduce using rule 13 (statement -> input .)
    ELSE            reduce using rule 13 (statement -> input .)


state 9

    (14) statement -> class_declaration .

    LET             reduce using rule 14 (statement -> class_declaration .)
    CONST           reduce using rule 14 (statement -> class_declaration .)
    VAR             reduce using rule 14 (statement -> class_declaration .)
    NOT             reduce using rule 14 (statement -> class_declaration .)
    IF              reduce using rule 14 (statement -> class_declaration .)
    IDENTIFIER      reduce using rule 14 (statement -> class_declaration .)
    CLASS           reduce using rule 14 (statement -> class_declaration .)
    NUMBER          reduce using rule 14 (statement -> class_declaration .)
    STRING          reduce using rule 14 (statement -> class_declaration .)
    CHARACTER       reduce using rule 14 (statement -> class_declaration .)
    $end            reduce using rule 14 (statement -> class_declaration .)
    RBRACE          reduce using rule 14 (statement -> class_declaration .)
    ELSE            reduce using rule 14 (statement -> class_declaration .)


state 10

    (1) assignment -> LET . IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> LET . IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> LET . IDENTIFIER COLON data_type SEMICOLON

    IDENTIFIER      shift and go to state 33


state 11

    (49) print -> IDENTIFIER . DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> IDENTIFIER . EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (39) value -> IDENTIFIER .

    DOT             shift and go to state 34
    EQUALS          shift and go to state 35
    SEMICOLON       reduce using rule 39 (value -> IDENTIFIER .)
    PLUS            reduce using rule 39 (value -> IDENTIFIER .)
    MINUS           reduce using rule 39 (value -> IDENTIFIER .)
    AND             reduce using rule 39 (value -> IDENTIFIER .)
    OROR            reduce using rule 39 (value -> IDENTIFIER .)
    EQEQ            reduce using rule 39 (value -> IDENTIFIER .)
    NOTEQ           reduce using rule 39 (value -> IDENTIFIER .)
    GT              reduce using rule 39 (value -> IDENTIFIER .)
    LT              reduce using rule 39 (value -> IDENTIFIER .)
    GE              reduce using rule 39 (value -> IDENTIFIER .)
    LE              reduce using rule 39 (value -> IDENTIFIER .)


state 12

    (48) expression -> value .

    SEMICOLON       reduce using rule 48 (expression -> value .)
    PLUS            reduce using rule 48 (expression -> value .)
    MINUS           reduce using rule 48 (expression -> value .)
    AND             reduce using rule 48 (expression -> value .)
    OROR            reduce using rule 48 (expression -> value .)
    EQEQ            reduce using rule 48 (expression -> value .)
    NOTEQ           reduce using rule 48 (expression -> value .)
    GT              reduce using rule 48 (expression -> value .)
    LT              reduce using rule 48 (expression -> value .)
    GE              reduce using rule 48 (expression -> value .)
    LE              reduce using rule 48 (expression -> value .)
    RPAREN          reduce using rule 48 (expression -> value .)


state 13

    (4) assignment -> CONST . IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> CONST . IDENTIFIER COLON data_type EQUALS value SEMICOLON

    IDENTIFIER      shift and go to state 36


state 14

    (6) assignment -> VAR . IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> VAR . IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> VAR . IDENTIFIER COLON data_type SEMICOLON

    IDENTIFIER      shift and go to state 37


state 15

    (53) expression -> NOT . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 38
    value                          shift and go to state 12

state 16

    (19) if_statement -> IF . LPAREN expression RPAREN statement_block
    (20) if_statement -> IF . LPAREN expression RPAREN statement_block ELSE statement_block

    LPAREN          shift and go to state 40


state 17

    (61) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 41


state 18

    (36) value -> NUMBER .

    SEMICOLON       reduce using rule 36 (value -> NUMBER .)
    PLUS            reduce using rule 36 (value -> NUMBER .)
    MINUS           reduce using rule 36 (value -> NUMBER .)
    AND             reduce using rule 36 (value -> NUMBER .)
    OROR            reduce using rule 36 (value -> NUMBER .)
    EQEQ            reduce using rule 36 (value -> NUMBER .)
    NOTEQ           reduce using rule 36 (value -> NUMBER .)
    GT              reduce using rule 36 (value -> NUMBER .)
    LT              reduce using rule 36 (value -> NUMBER .)
    GE              reduce using rule 36 (value -> NUMBER .)
    LE              reduce using rule 36 (value -> NUMBER .)
    RPAREN          reduce using rule 36 (value -> NUMBER .)


state 19

    (37) value -> STRING .

    SEMICOLON       reduce using rule 37 (value -> STRING .)
    PLUS            reduce using rule 37 (value -> STRING .)
    MINUS           reduce using rule 37 (value -> STRING .)
    AND             reduce using rule 37 (value -> STRING .)
    OROR            reduce using rule 37 (value -> STRING .)
    EQEQ            reduce using rule 37 (value -> STRING .)
    NOTEQ           reduce using rule 37 (value -> STRING .)
    GT              reduce using rule 37 (value -> STRING .)
    LT              reduce using rule 37 (value -> STRING .)
    GE              reduce using rule 37 (value -> STRING .)
    LE              reduce using rule 37 (value -> STRING .)
    RPAREN          reduce using rule 37 (value -> STRING .)


state 20

    (38) value -> CHARACTER .

    SEMICOLON       reduce using rule 38 (value -> CHARACTER .)
    PLUS            reduce using rule 38 (value -> CHARACTER .)
    MINUS           reduce using rule 38 (value -> CHARACTER .)
    AND             reduce using rule 38 (value -> CHARACTER .)
    OROR            reduce using rule 38 (value -> CHARACTER .)
    EQEQ            reduce using rule 38 (value -> CHARACTER .)
    NOTEQ           reduce using rule 38 (value -> CHARACTER .)
    GT              reduce using rule 38 (value -> CHARACTER .)
    LT              reduce using rule 38 (value -> CHARACTER .)
    GE              reduce using rule 38 (value -> CHARACTER .)
    LE              reduce using rule 38 (value -> CHARACTER .)
    RPAREN          reduce using rule 38 (value -> CHARACTER .)


state 21

    (18) statement_list -> statement statement_list .

    $end            reduce using rule 18 (statement_list -> statement statement_list .)
    RBRACE          reduce using rule 18 (statement_list -> statement statement_list .)


state 22

    (10) statement -> expression SEMICOLON .

    LET             reduce using rule 10 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 10 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 10 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 10 (statement -> expression SEMICOLON .)
    IF              reduce using rule 10 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 10 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 10 (statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 10 (statement -> expression SEMICOLON .)
    $end            reduce using rule 10 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> expression SEMICOLON .)


state 23

    (30) expression -> expression PLUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . factor
    (35) factor -> . NUMBER

    NUMBER          shift and go to state 44

    term                           shift and go to state 42
    factor                         shift and go to state 43

state 24

    (31) expression -> expression MINUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . factor
    (35) factor -> . NUMBER

    NUMBER          shift and go to state 44

    term                           shift and go to state 45
    factor                         shift and go to state 43

state 25

    (51) expression -> expression AND . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 46
    value                          shift and go to state 12

state 26

    (52) expression -> expression OROR . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 47
    value                          shift and go to state 12

state 27

    (54) expression -> expression EQEQ . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 48
    value                          shift and go to state 12

state 28

    (55) expression -> expression NOTEQ . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 49
    value                          shift and go to state 12

state 29

    (56) expression -> expression GT . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 50
    value                          shift and go to state 12

state 30

    (57) expression -> expression LT . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 51
    value                          shift and go to state 12

state 31

    (58) expression -> expression GE . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 52
    value                          shift and go to state 12

state 32

    (59) expression -> expression LE . expression
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 53
    value                          shift and go to state 12

state 33

    (1) assignment -> LET IDENTIFIER . EQUALS value SEMICOLON
    (2) assignment -> LET IDENTIFIER . COLON data_type EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER . COLON data_type SEMICOLON

    EQUALS          shift and go to state 54
    COLON           shift and go to state 55


state 34

    (49) print -> IDENTIFIER DOT . IDENTIFIER LPAREN value RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 56


state 35

    (50) input -> IDENTIFIER EQUALS . IDENTIFIER LPAREN value RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 57


state 36

    (4) assignment -> CONST IDENTIFIER . EQUALS value SEMICOLON
    (5) assignment -> CONST IDENTIFIER . COLON data_type EQUALS value SEMICOLON

    EQUALS          shift and go to state 58
    COLON           shift and go to state 59


state 37

    (6) assignment -> VAR IDENTIFIER . EQUALS value SEMICOLON
    (7) assignment -> VAR IDENTIFIER . COLON data_type EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER . COLON data_type SEMICOLON

    EQUALS          shift and go to state 60
    COLON           shift and go to state 61


state 38

    (53) expression -> NOT expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 53 (expression -> NOT expression .)
    RPAREN          reduce using rule 53 (expression -> NOT expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 53 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 53 (expression -> NOT expression .) ]
  ! OROR            [ reduce using rule 53 (expression -> NOT expression .) ]
  ! EQEQ            [ reduce using rule 53 (expression -> NOT expression .) ]
  ! NOTEQ           [ reduce using rule 53 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 53 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 53 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 53 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 53 (expression -> NOT expression .) ]


state 39

    (39) value -> IDENTIFIER .

    PLUS            reduce using rule 39 (value -> IDENTIFIER .)
    MINUS           reduce using rule 39 (value -> IDENTIFIER .)
    AND             reduce using rule 39 (value -> IDENTIFIER .)
    OROR            reduce using rule 39 (value -> IDENTIFIER .)
    EQEQ            reduce using rule 39 (value -> IDENTIFIER .)
    NOTEQ           reduce using rule 39 (value -> IDENTIFIER .)
    GT              reduce using rule 39 (value -> IDENTIFIER .)
    LT              reduce using rule 39 (value -> IDENTIFIER .)
    GE              reduce using rule 39 (value -> IDENTIFIER .)
    LE              reduce using rule 39 (value -> IDENTIFIER .)
    SEMICOLON       reduce using rule 39 (value -> IDENTIFIER .)
    RPAREN          reduce using rule 39 (value -> IDENTIFIER .)


state 40

    (19) if_statement -> IF LPAREN . expression RPAREN statement_block
    (20) if_statement -> IF LPAREN . expression RPAREN statement_block ELSE statement_block
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NOT             shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    expression                     shift and go to state 62
    value                          shift and go to state 12

state 41

    (61) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 63


state 42

    (30) expression -> expression PLUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 30 (expression -> expression PLUS term .)
    PLUS            reduce using rule 30 (expression -> expression PLUS term .)
    MINUS           reduce using rule 30 (expression -> expression PLUS term .)
    AND             reduce using rule 30 (expression -> expression PLUS term .)
    OROR            reduce using rule 30 (expression -> expression PLUS term .)
    EQEQ            reduce using rule 30 (expression -> expression PLUS term .)
    NOTEQ           reduce using rule 30 (expression -> expression PLUS term .)
    GT              reduce using rule 30 (expression -> expression PLUS term .)
    LT              reduce using rule 30 (expression -> expression PLUS term .)
    GE              reduce using rule 30 (expression -> expression PLUS term .)
    LE              reduce using rule 30 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 30 (expression -> expression PLUS term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65


state 43

    (34) term -> factor .

    TIMES           reduce using rule 34 (term -> factor .)
    DIVIDE          reduce using rule 34 (term -> factor .)
    SEMICOLON       reduce using rule 34 (term -> factor .)
    PLUS            reduce using rule 34 (term -> factor .)
    MINUS           reduce using rule 34 (term -> factor .)
    AND             reduce using rule 34 (term -> factor .)
    OROR            reduce using rule 34 (term -> factor .)
    EQEQ            reduce using rule 34 (term -> factor .)
    NOTEQ           reduce using rule 34 (term -> factor .)
    GT              reduce using rule 34 (term -> factor .)
    LT              reduce using rule 34 (term -> factor .)
    GE              reduce using rule 34 (term -> factor .)
    LE              reduce using rule 34 (term -> factor .)
    RPAREN          reduce using rule 34 (term -> factor .)


state 44

    (35) factor -> NUMBER .

    TIMES           reduce using rule 35 (factor -> NUMBER .)
    DIVIDE          reduce using rule 35 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 35 (factor -> NUMBER .)
    PLUS            reduce using rule 35 (factor -> NUMBER .)
    MINUS           reduce using rule 35 (factor -> NUMBER .)
    AND             reduce using rule 35 (factor -> NUMBER .)
    OROR            reduce using rule 35 (factor -> NUMBER .)
    EQEQ            reduce using rule 35 (factor -> NUMBER .)
    NOTEQ           reduce using rule 35 (factor -> NUMBER .)
    GT              reduce using rule 35 (factor -> NUMBER .)
    LT              reduce using rule 35 (factor -> NUMBER .)
    GE              reduce using rule 35 (factor -> NUMBER .)
    LE              reduce using rule 35 (factor -> NUMBER .)
    RPAREN          reduce using rule 35 (factor -> NUMBER .)


state 45

    (31) expression -> expression MINUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 31 (expression -> expression MINUS term .)
    PLUS            reduce using rule 31 (expression -> expression MINUS term .)
    MINUS           reduce using rule 31 (expression -> expression MINUS term .)
    AND             reduce using rule 31 (expression -> expression MINUS term .)
    OROR            reduce using rule 31 (expression -> expression MINUS term .)
    EQEQ            reduce using rule 31 (expression -> expression MINUS term .)
    NOTEQ           reduce using rule 31 (expression -> expression MINUS term .)
    GT              reduce using rule 31 (expression -> expression MINUS term .)
    LT              reduce using rule 31 (expression -> expression MINUS term .)
    GE              reduce using rule 31 (expression -> expression MINUS term .)
    LE              reduce using rule 31 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 31 (expression -> expression MINUS term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65


state 46

    (51) expression -> expression AND expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 51 (expression -> expression AND expression .)
    RPAREN          reduce using rule 51 (expression -> expression AND expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! OROR            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! EQEQ            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression AND expression .) ]


state 47

    (52) expression -> expression OROR expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 52 (expression -> expression OROR expression .)
    RPAREN          reduce using rule 52 (expression -> expression OROR expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! OROR            [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! EQEQ            [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! NOTEQ           [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression OROR expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression OROR expression .) ]


state 48

    (54) expression -> expression EQEQ expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 54 (expression -> expression EQEQ expression .)
    RPAREN          reduce using rule 54 (expression -> expression EQEQ expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! AND             [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! OROR            [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! EQEQ            [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! NOTEQ           [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]


state 49

    (55) expression -> expression NOTEQ expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 55 (expression -> expression NOTEQ expression .)
    RPAREN          reduce using rule 55 (expression -> expression NOTEQ expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! OROR            [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! EQEQ            [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression NOTEQ expression .) ]


state 50

    (56) expression -> expression GT expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 56 (expression -> expression GT expression .)
    RPAREN          reduce using rule 56 (expression -> expression GT expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! OROR            [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! EQEQ            [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! NOTEQ           [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression GT expression .) ]


state 51

    (57) expression -> expression LT expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 57 (expression -> expression LT expression .)
    RPAREN          reduce using rule 57 (expression -> expression LT expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! OROR            [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! EQEQ            [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! NOTEQ           [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression LT expression .) ]


state 52

    (58) expression -> expression GE expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 58 (expression -> expression GE expression .)
    RPAREN          reduce using rule 58 (expression -> expression GE expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! OROR            [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! EQEQ            [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! NOTEQ           [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression GE expression .) ]


state 53

    (59) expression -> expression LE expression .
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    SEMICOLON       reduce using rule 59 (expression -> expression LE expression .)
    RPAREN          reduce using rule 59 (expression -> expression LE expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32

  ! PLUS            [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! OROR            [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! EQEQ            [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! NOTEQ           [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression LE expression .) ]


state 54

    (1) assignment -> LET IDENTIFIER EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 66

state 55

    (2) assignment -> LET IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER COLON . data_type SEMICOLON
    (21) data_type -> . STRING_TYPE
    (22) data_type -> . NUMBER_TYPE
    (23) data_type -> . BOOLEAN_TYPE
    (24) data_type -> . CHAR_TYPE
    (25) data_type -> . array_type
    (44) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (45) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (46) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (47) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 68
    NUMBER_TYPE     shift and go to state 69
    BOOLEAN_TYPE    shift and go to state 70
    CHAR_TYPE       shift and go to state 71
    ANY             shift and go to state 73

    data_type                      shift and go to state 67
    array_type                     shift and go to state 72

state 56

    (49) print -> IDENTIFIER DOT IDENTIFIER . LPAREN value RPAREN SEMICOLON

    LPAREN          shift and go to state 74


state 57

    (50) input -> IDENTIFIER EQUALS IDENTIFIER . LPAREN value RPAREN SEMICOLON

    LPAREN          shift and go to state 75


state 58

    (4) assignment -> CONST IDENTIFIER EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 76

state 59

    (5) assignment -> CONST IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (21) data_type -> . STRING_TYPE
    (22) data_type -> . NUMBER_TYPE
    (23) data_type -> . BOOLEAN_TYPE
    (24) data_type -> . CHAR_TYPE
    (25) data_type -> . array_type
    (44) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (45) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (46) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (47) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 68
    NUMBER_TYPE     shift and go to state 69
    BOOLEAN_TYPE    shift and go to state 70
    CHAR_TYPE       shift and go to state 71
    ANY             shift and go to state 73

    data_type                      shift and go to state 77
    array_type                     shift and go to state 72

state 60

    (6) assignment -> VAR IDENTIFIER EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 78

state 61

    (7) assignment -> VAR IDENTIFIER COLON . data_type EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER COLON . data_type SEMICOLON
    (21) data_type -> . STRING_TYPE
    (22) data_type -> . NUMBER_TYPE
    (23) data_type -> . BOOLEAN_TYPE
    (24) data_type -> . CHAR_TYPE
    (25) data_type -> . array_type
    (44) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (45) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (46) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (47) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 68
    NUMBER_TYPE     shift and go to state 69
    BOOLEAN_TYPE    shift and go to state 70
    CHAR_TYPE       shift and go to state 71
    ANY             shift and go to state 73

    data_type                      shift and go to state 79
    array_type                     shift and go to state 72

state 62

    (19) if_statement -> IF LPAREN expression . RPAREN statement_block
    (20) if_statement -> IF LPAREN expression . RPAREN statement_block ELSE statement_block
    (30) expression -> expression . PLUS term
    (31) expression -> expression . MINUS term
    (51) expression -> expression . AND expression
    (52) expression -> expression . OROR expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NOTEQ expression
    (56) expression -> expression . GT expression
    (57) expression -> expression . LT expression
    (58) expression -> expression . GE expression
    (59) expression -> expression . LE expression

    RPAREN          shift and go to state 80
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    AND             shift and go to state 25
    OROR            shift and go to state 26
    EQEQ            shift and go to state 27
    NOTEQ           shift and go to state 28
    GT              shift and go to state 29
    LT              shift and go to state 30
    GE              shift and go to state 31
    LE              shift and go to state 32


state 63

    (61) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (62) class_body -> . property
    (63) class_body -> . empty
    (64) property -> . IDENTIFIER COLON data_type SEMICOLON
    (60) empty -> .

    IDENTIFIER      shift and go to state 81
    RBRACE          reduce using rule 60 (empty -> .)

    class_body                     shift and go to state 82
    property                       shift and go to state 83
    empty                          shift and go to state 84

state 64

    (32) term -> term TIMES . factor
    (35) factor -> . NUMBER

    NUMBER          shift and go to state 44

    factor                         shift and go to state 85

state 65

    (33) term -> term DIVIDE . factor
    (35) factor -> . NUMBER

    NUMBER          shift and go to state 44

    factor                         shift and go to state 86

state 66

    (1) assignment -> LET IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 87


state 67

    (2) assignment -> LET IDENTIFIER COLON data_type . EQUALS value SEMICOLON
    (3) assignment -> LET IDENTIFIER COLON data_type . SEMICOLON

    EQUALS          shift and go to state 88
    SEMICOLON       shift and go to state 89


state 68

    (21) data_type -> STRING_TYPE .
    (45) array_type -> STRING_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 21 (data_type -> STRING_TYPE .)
    SEMICOLON       reduce using rule 21 (data_type -> STRING_TYPE .)
    LBRACKET        shift and go to state 90


state 69

    (22) data_type -> NUMBER_TYPE .
    (44) array_type -> NUMBER_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 22 (data_type -> NUMBER_TYPE .)
    SEMICOLON       reduce using rule 22 (data_type -> NUMBER_TYPE .)
    LBRACKET        shift and go to state 91


state 70

    (23) data_type -> BOOLEAN_TYPE .
    (46) array_type -> BOOLEAN_TYPE . LBRACKET RBRACKET

    EQUALS          reduce using rule 23 (data_type -> BOOLEAN_TYPE .)
    SEMICOLON       reduce using rule 23 (data_type -> BOOLEAN_TYPE .)
    LBRACKET        shift and go to state 92


state 71

    (24) data_type -> CHAR_TYPE .

    EQUALS          reduce using rule 24 (data_type -> CHAR_TYPE .)
    SEMICOLON       reduce using rule 24 (data_type -> CHAR_TYPE .)


state 72

    (25) data_type -> array_type .

    EQUALS          reduce using rule 25 (data_type -> array_type .)
    SEMICOLON       reduce using rule 25 (data_type -> array_type .)


state 73

    (47) array_type -> ANY . LBRACKET RBRACKET

    LBRACKET        shift and go to state 93


state 74

    (49) print -> IDENTIFIER DOT IDENTIFIER LPAREN . value RPAREN SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 94

state 75

    (50) input -> IDENTIFIER EQUALS IDENTIFIER LPAREN . value RPAREN SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 95

state 76

    (4) assignment -> CONST IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 96


state 77

    (5) assignment -> CONST IDENTIFIER COLON data_type . EQUALS value SEMICOLON

    EQUALS          shift and go to state 97


state 78

    (6) assignment -> VAR IDENTIFIER EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 98


state 79

    (7) assignment -> VAR IDENTIFIER COLON data_type . EQUALS value SEMICOLON
    (8) assignment -> VAR IDENTIFIER COLON data_type . SEMICOLON

    EQUALS          shift and go to state 99
    SEMICOLON       shift and go to state 100


state 80

    (19) if_statement -> IF LPAREN expression RPAREN . statement_block
    (20) if_statement -> IF LPAREN expression RPAREN . statement_block ELSE statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print
    (13) statement -> . input
    (14) statement -> . class_declaration
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (49) print -> . IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> . IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    LBRACE          shift and go to state 102
    LET             shift and go to state 10
    CONST           shift and go to state 13
    VAR             shift and go to state 14
    NOT             shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 11
    CLASS           shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20

    expression                     shift and go to state 5
    statement_block                shift and go to state 101
    statement                      shift and go to state 103
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 6
    print                          shift and go to state 7
    input                          shift and go to state 8
    class_declaration              shift and go to state 9
    value                          shift and go to state 12

state 81

    (64) property -> IDENTIFIER . COLON data_type SEMICOLON

    COLON           shift and go to state 104


state 82

    (61) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 105


state 83

    (62) class_body -> property .

    RBRACE          reduce using rule 62 (class_body -> property .)


state 84

    (63) class_body -> empty .

    RBRACE          reduce using rule 63 (class_body -> empty .)


state 85

    (32) term -> term TIMES factor .

    TIMES           reduce using rule 32 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 32 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 32 (term -> term TIMES factor .)
    PLUS            reduce using rule 32 (term -> term TIMES factor .)
    MINUS           reduce using rule 32 (term -> term TIMES factor .)
    AND             reduce using rule 32 (term -> term TIMES factor .)
    OROR            reduce using rule 32 (term -> term TIMES factor .)
    EQEQ            reduce using rule 32 (term -> term TIMES factor .)
    NOTEQ           reduce using rule 32 (term -> term TIMES factor .)
    GT              reduce using rule 32 (term -> term TIMES factor .)
    LT              reduce using rule 32 (term -> term TIMES factor .)
    GE              reduce using rule 32 (term -> term TIMES factor .)
    LE              reduce using rule 32 (term -> term TIMES factor .)
    RPAREN          reduce using rule 32 (term -> term TIMES factor .)


state 86

    (33) term -> term DIVIDE factor .

    TIMES           reduce using rule 33 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 33 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 33 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 33 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 33 (term -> term DIVIDE factor .)
    AND             reduce using rule 33 (term -> term DIVIDE factor .)
    OROR            reduce using rule 33 (term -> term DIVIDE factor .)
    EQEQ            reduce using rule 33 (term -> term DIVIDE factor .)
    NOTEQ           reduce using rule 33 (term -> term DIVIDE factor .)
    GT              reduce using rule 33 (term -> term DIVIDE factor .)
    LT              reduce using rule 33 (term -> term DIVIDE factor .)
    GE              reduce using rule 33 (term -> term DIVIDE factor .)
    LE              reduce using rule 33 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 33 (term -> term DIVIDE factor .)


state 87

    (1) assignment -> LET IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    CLASS           reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    STRING          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 1 (assignment -> LET IDENTIFIER EQUALS value SEMICOLON .)


state 88

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 106

state 89

    (3) assignment -> LET IDENTIFIER COLON data_type SEMICOLON .

    LET             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    CONST           reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    VAR             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    NOT             reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    IF              reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    IDENTIFIER      reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    CLASS           reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    NUMBER          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    STRING          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    CHARACTER       reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    $end            reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    RBRACE          reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)
    ELSE            reduce using rule 3 (assignment -> LET IDENTIFIER COLON data_type SEMICOLON .)


state 90

    (45) array_type -> STRING_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 107


state 91

    (44) array_type -> NUMBER_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 108


state 92

    (46) array_type -> BOOLEAN_TYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 109


state 93

    (47) array_type -> ANY LBRACKET . RBRACKET

    RBRACKET        shift and go to state 110


state 94

    (49) print -> IDENTIFIER DOT IDENTIFIER LPAREN value . RPAREN SEMICOLON

    RPAREN          shift and go to state 111


state 95

    (50) input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value . RPAREN SEMICOLON

    RPAREN          shift and go to state 112


state 96

    (4) assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    CLASS           reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    STRING          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 4 (assignment -> CONST IDENTIFIER EQUALS value SEMICOLON .)


state 97

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 113

state 98

    (6) assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .

    LET             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    CONST           reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    VAR             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    NOT             reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    IF              reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    CLASS           reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    STRING          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    $end            reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)
    ELSE            reduce using rule 6 (assignment -> VAR IDENTIFIER EQUALS value SEMICOLON .)


state 99

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS . value SEMICOLON
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20
    IDENTIFIER      shift and go to state 39

    value                          shift and go to state 114

state 100

    (8) assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .

    LET             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    CONST           reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    VAR             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    NOT             reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    IF              reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    IDENTIFIER      reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    CLASS           reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    NUMBER          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    STRING          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    CHARACTER       reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    $end            reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    RBRACE          reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)
    ELSE            reduce using rule 8 (assignment -> VAR IDENTIFIER COLON data_type SEMICOLON .)


state 101

    (19) if_statement -> IF LPAREN expression RPAREN statement_block .
    (20) if_statement -> IF LPAREN expression RPAREN statement_block . ELSE statement_block

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    CONST           reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    VAR             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    NOT             reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    IF              reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    IDENTIFIER      reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    CLASS           reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    NUMBER          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    STRING          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    CHARACTER       reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    $end            reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    RBRACE          reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .)
    ELSE            shift and go to state 115

  ! ELSE            [ reduce using rule 19 (if_statement -> IF LPAREN expression RPAREN statement_block .) ]


state 102

    (15) statement_block -> LBRACE . statement_list RBRACE
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print
    (13) statement -> . input
    (14) statement -> . class_declaration
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (49) print -> . IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> . IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    LET             shift and go to state 10
    CONST           shift and go to state 13
    VAR             shift and go to state 14
    NOT             shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 11
    CLASS           shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20

    statement_list                 shift and go to state 116
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    print                          shift and go to state 7
    input                          shift and go to state 8
    class_declaration              shift and go to state 9
    value                          shift and go to state 12

state 103

    (16) statement_block -> statement .

    ELSE            reduce using rule 16 (statement_block -> statement .)
    LET             reduce using rule 16 (statement_block -> statement .)
    CONST           reduce using rule 16 (statement_block -> statement .)
    VAR             reduce using rule 16 (statement_block -> statement .)
    NOT             reduce using rule 16 (statement_block -> statement .)
    IF              reduce using rule 16 (statement_block -> statement .)
    IDENTIFIER      reduce using rule 16 (statement_block -> statement .)
    CLASS           reduce using rule 16 (statement_block -> statement .)
    NUMBER          reduce using rule 16 (statement_block -> statement .)
    STRING          reduce using rule 16 (statement_block -> statement .)
    CHARACTER       reduce using rule 16 (statement_block -> statement .)
    $end            reduce using rule 16 (statement_block -> statement .)
    RBRACE          reduce using rule 16 (statement_block -> statement .)


state 104

    (64) property -> IDENTIFIER COLON . data_type SEMICOLON
    (21) data_type -> . STRING_TYPE
    (22) data_type -> . NUMBER_TYPE
    (23) data_type -> . BOOLEAN_TYPE
    (24) data_type -> . CHAR_TYPE
    (25) data_type -> . array_type
    (44) array_type -> . NUMBER_TYPE LBRACKET RBRACKET
    (45) array_type -> . STRING_TYPE LBRACKET RBRACKET
    (46) array_type -> . BOOLEAN_TYPE LBRACKET RBRACKET
    (47) array_type -> . ANY LBRACKET RBRACKET

    STRING_TYPE     shift and go to state 68
    NUMBER_TYPE     shift and go to state 69
    BOOLEAN_TYPE    shift and go to state 70
    CHAR_TYPE       shift and go to state 71
    ANY             shift and go to state 73

    data_type                      shift and go to state 117
    array_type                     shift and go to state 72

state 105

    (61) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    LET             reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NOT             reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    NUMBER          reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    STRING          reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CHARACTER       reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ELSE            reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 106

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 118


state 107

    (45) array_type -> STRING_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 45 (array_type -> STRING_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 45 (array_type -> STRING_TYPE LBRACKET RBRACKET .)


state 108

    (44) array_type -> NUMBER_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 44 (array_type -> NUMBER_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 44 (array_type -> NUMBER_TYPE LBRACKET RBRACKET .)


state 109

    (46) array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .

    EQUALS          reduce using rule 46 (array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 46 (array_type -> BOOLEAN_TYPE LBRACKET RBRACKET .)


state 110

    (47) array_type -> ANY LBRACKET RBRACKET .

    EQUALS          reduce using rule 47 (array_type -> ANY LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 47 (array_type -> ANY LBRACKET RBRACKET .)


state 111

    (49) print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 119


state 112

    (50) input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 120


state 113

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 121


state 114

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS value . SEMICOLON

    SEMICOLON       shift and go to state 122


state 115

    (20) if_statement -> IF LPAREN expression RPAREN statement_block ELSE . statement_block
    (15) statement_block -> . LBRACE statement_list RBRACE
    (16) statement_block -> . statement
    (9) statement -> . assignment
    (10) statement -> . expression SEMICOLON
    (11) statement -> . if_statement
    (12) statement -> . print
    (13) statement -> . input
    (14) statement -> . class_declaration
    (1) assignment -> . LET IDENTIFIER EQUALS value SEMICOLON
    (2) assignment -> . LET IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (3) assignment -> . LET IDENTIFIER COLON data_type SEMICOLON
    (4) assignment -> . CONST IDENTIFIER EQUALS value SEMICOLON
    (5) assignment -> . CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (6) assignment -> . VAR IDENTIFIER EQUALS value SEMICOLON
    (7) assignment -> . VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON
    (8) assignment -> . VAR IDENTIFIER COLON data_type SEMICOLON
    (30) expression -> . expression PLUS term
    (31) expression -> . expression MINUS term
    (48) expression -> . value
    (51) expression -> . expression AND expression
    (52) expression -> . expression OROR expression
    (53) expression -> . NOT expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NOTEQ expression
    (56) expression -> . expression GT expression
    (57) expression -> . expression LT expression
    (58) expression -> . expression GE expression
    (59) expression -> . expression LE expression
    (19) if_statement -> . IF LPAREN expression RPAREN statement_block
    (20) if_statement -> . IF LPAREN expression RPAREN statement_block ELSE statement_block
    (49) print -> . IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON
    (50) input -> . IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (36) value -> . NUMBER
    (37) value -> . STRING
    (38) value -> . CHARACTER
    (39) value -> . IDENTIFIER

    LBRACE          shift and go to state 102
    LET             shift and go to state 10
    CONST           shift and go to state 13
    VAR             shift and go to state 14
    NOT             shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 11
    CLASS           shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    CHARACTER       shift and go to state 20

    expression                     shift and go to state 5
    statement_block                shift and go to state 123
    statement                      shift and go to state 103
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 6
    print                          shift and go to state 7
    input                          shift and go to state 8
    class_declaration              shift and go to state 9
    value                          shift and go to state 12

state 116

    (15) statement_block -> LBRACE statement_list . RBRACE

    RBRACE          shift and go to state 124


state 117

    (64) property -> IDENTIFIER COLON data_type . SEMICOLON

    SEMICOLON       shift and go to state 125


state 118

    (2) assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CLASS           reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    STRING          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 2 (assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 119

    (49) print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .

    LET             reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CONST           reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    VAR             reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    NOT             reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    IF              reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CLASS           reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    NUMBER          reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    STRING          reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CHARACTER       reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    $end            reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    RBRACE          reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    ELSE            reduce using rule 49 (print -> IDENTIFIER DOT IDENTIFIER LPAREN value RPAREN SEMICOLON .)


state 120

    (50) input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .

    LET             reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CONST           reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    VAR             reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    NOT             reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    IF              reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CLASS           reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    NUMBER          reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    STRING          reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    CHARACTER       reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    $end            reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    RBRACE          reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)
    ELSE            reduce using rule 50 (input -> IDENTIFIER EQUALS IDENTIFIER LPAREN value RPAREN SEMICOLON .)


state 121

    (5) assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CLASS           reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    STRING          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 5 (assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 122

    (7) assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .

    LET             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CONST           reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    VAR             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NOT             reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IF              reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CLASS           reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    NUMBER          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    STRING          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    CHARACTER       reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    $end            reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    RBRACE          reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)
    ELSE            reduce using rule 7 (assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON .)


state 123

    (20) if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .

    LET             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    CONST           reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    VAR             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    NOT             reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    IF              reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    IDENTIFIER      reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    CLASS           reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    NUMBER          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    STRING          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    CHARACTER       reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    $end            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    RBRACE          reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)
    ELSE            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block .)


state 124

    (15) statement_block -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    LET             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    CLASS           reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 15 (statement_block -> LBRACE statement_list RBRACE .)


state 125

    (64) property -> IDENTIFIER COLON data_type SEMICOLON .

    RBRACE          reduce using rule 64 (property -> IDENTIFIER COLON data_type SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for AND in state 38 resolved as shift
WARNING: shift/reduce conflict for OROR in state 38 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 38 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 38 resolved as shift
WARNING: shift/reduce conflict for GT in state 38 resolved as shift
WARNING: shift/reduce conflict for LT in state 38 resolved as shift
WARNING: shift/reduce conflict for GE in state 38 resolved as shift
WARNING: shift/reduce conflict for LE in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OROR in state 46 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 46 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for GE in state 46 resolved as shift
WARNING: shift/reduce conflict for LE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OROR in state 47 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for GE in state 47 resolved as shift
WARNING: shift/reduce conflict for LE in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OROR in state 48 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GE in state 48 resolved as shift
WARNING: shift/reduce conflict for LE in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for OROR in state 49 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GE in state 49 resolved as shift
WARNING: shift/reduce conflict for LE in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OROR in state 50 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 50 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GE in state 50 resolved as shift
WARNING: shift/reduce conflict for LE in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OROR in state 51 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GE in state 51 resolved as shift
WARNING: shift/reduce conflict for LE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for AND in state 52 resolved as shift
WARNING: shift/reduce conflict for OROR in state 52 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for AND in state 53 resolved as shift
WARNING: shift/reduce conflict for OROR in state 53 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GE in state 53 resolved as shift
WARNING: shift/reduce conflict for LE in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
