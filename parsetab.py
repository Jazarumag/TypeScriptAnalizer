
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ANY ARROW BACKTICK BOOLEAN_TYPE BREAK CASE CHARACTER CHAR_TYPE CLASS COLON COMMA CONST CONSTRUCTOR DEFAULT DIVIDE DOLLAR DOT ELSE EQEQ EQUALS FOR FUNCTION GE GT IDENTIFIER IF INPUT INTERFACE LBRACE LBRACKET LE LET LPAREN LT MINUS MODULE NOT NOTEQ NUMBER NUMBER_TYPE OR PIPE PLUS POWER PRINT PRIVATE PROTECTED PUBLIC QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRING_TYPE SWITCH THIS TIMES TYPE TYPEOF VAR VOID WHILEassignment : LET IDENTIFIER EQUALS value SEMICOLON \n                    | LET IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | LET IDENTIFIER COLON data_type SEMICOLON\n                    | CONST IDENTIFIER EQUALS value SEMICOLON\n                    | CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | VAR IDENTIFIER EQUALS value SEMICOLON\n                    | VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON\n                    | VAR IDENTIFIER COLON data_type SEMICOLONstatement : assignment\n                    | expression SEMICOLON\n                    | if_statement\n                    | print_statement\n                    | function_def\n                    | return_statementstatement_block : LBRACE statement_list RBRACE\n                            | statementstatement_list : statement\n                        | statement statement_listif_statement : IF LPAREN expression RPAREN statement_block\n                        | IF LPAREN expression RPAREN statement_block ELSE statement_blockprint_statement : PRINT LPAREN expression RPAREN SEMICOLONfactor : INPUT LPAREN RPAREN\n              | INPUT LPAREN STRING RPARENexpression : expression AND expression\n                  | expression OR expression\n                  | NOT expressionexpression : expression EQEQ expression\n                  | expression NOTEQ expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionfunction_def : FUNCTION IDENTIFIER LPAREN RPAREN statement_block\n                    | FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_blockparam_list : IDENTIFIER\n                  | IDENTIFIER COMMA param_listreturn_statement : RETURN expression SEMICOLONclass_def : CLASS IDENTIFIER LBRACE class_body RBRACEclass_body : class_member\n                  | class_member class_bodyclass_member : assignment\n                    | function_defdata_type : STRING_TYPE\n                    | NUMBER_TYPE\n                    | BOOLEAN_TYPE\n                    | CHAR_TYPE\n                    | array_typebody : sentence\n                | sentence bodysentence : assignment\n                    | expression expression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERvalue : NUMBER\n                | STRING\n                | CHARACTER\n                | IDENTIFIER\n                | INPUT LPAREN STRING RPARENarray : LBRACKET RBRACKET\n                | LBRACKET element_list RBRACKETelement_list : value\n                        | value COMMA element_listarray_type : NUMBER_TYPE LBRACKET RBRACKET\n                    | STRING_TYPE LBRACKET RBRACKET\n                    | BOOLEAN_TYPE LBRACKET RBRACKET\n                    | ANY LBRACKET RBRACKETprogram : statement_list'
    
_lr_action_items = {'LET':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[10,10,-9,-11,-12,-13,-14,-10,-37,10,10,-1,-3,-4,-6,-8,-19,10,-16,-21,-33,10,10,-34,-2,-5,-7,-20,-15,]),'CONST':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[11,11,-9,-11,-12,-13,-14,-10,-37,11,11,-1,-3,-4,-6,-8,-19,11,-16,-21,-33,11,11,-34,-2,-5,-7,-20,-15,]),'VAR':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[12,12,-9,-11,-12,-13,-14,-10,-37,12,12,-1,-3,-4,-6,-8,-19,12,-16,-21,-33,12,12,-34,-2,-5,-7,-20,-15,]),'NOT':([0,3,4,6,7,8,9,13,18,23,24,25,26,27,28,29,30,31,40,41,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[13,13,-9,-11,-12,-13,-14,13,13,-10,13,13,13,13,13,13,13,13,13,13,-37,13,13,-1,-3,-4,-6,-8,-19,13,-16,-21,-33,13,13,-34,-2,-5,-7,-20,-15,]),'IF':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[15,15,-9,-11,-12,-13,-14,-10,-37,15,15,-1,-3,-4,-6,-8,-19,15,-16,-21,-33,15,15,-34,-2,-5,-7,-20,-15,]),'PRINT':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[16,16,-9,-11,-12,-13,-14,-10,-37,16,16,-1,-3,-4,-6,-8,-19,16,-16,-21,-33,16,16,-34,-2,-5,-7,-20,-15,]),'FUNCTION':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[17,17,-9,-11,-12,-13,-14,-10,-37,17,17,-1,-3,-4,-6,-8,-19,17,-16,-21,-33,17,17,-34,-2,-5,-7,-20,-15,]),'RETURN':([0,3,4,6,7,8,9,23,66,86,89,92,95,100,102,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[18,18,-9,-11,-12,-13,-14,-10,-37,18,18,-1,-3,-4,-6,-8,-19,18,-16,-21,-33,18,18,-34,-2,-5,-7,-20,-15,]),'INPUT':([0,3,4,6,7,8,9,13,18,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,55,57,59,66,86,89,92,94,95,100,101,102,103,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[20,20,-9,-11,-12,-13,-14,20,20,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,74,74,74,-37,20,20,-1,74,-3,-4,74,-6,74,-8,-19,20,-16,-21,-33,20,20,-34,-2,-5,-7,-20,-15,]),'NUMBER':([0,3,4,6,7,8,9,13,18,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,55,57,59,66,86,89,92,94,95,100,101,102,103,104,105,106,107,108,110,111,120,123,125,126,127,128,129,],[21,21,-9,-11,-12,-13,-14,21,21,-10,21,21,21,21,21,21,21,21,21,21,21,21,21,21,71,71,71,-37,21,21,-1,71,-3,-4,71,-6,71,-8,-19,21,-16,-21,-33,21,21,-34,-2,-5,-7,-20,-15,]),'$end':([1,2,3,4,6,7,8,9,22,23,66,92,95,100,102,104,105,107,108,110,123,125,126,127,128,129,],[0,-72,-17,-9,-11,-12,-13,-14,-18,-10,-37,-1,-3,-4,-6,-8,-19,-16,-21,-33,-34,-2,-5,-7,-20,-15,]),'RBRACE':([3,4,6,7,8,9,22,23,66,92,95,100,102,104,105,107,108,110,121,123,125,126,127,128,129,],[-17,-9,-11,-12,-13,-14,-18,-10,-37,-1,-3,-4,-6,-8,-19,-16,-21,-33,129,-34,-2,-5,-7,-20,-15,]),'ELSE':([4,6,7,8,9,23,66,92,95,100,102,104,105,107,108,110,123,125,126,127,128,129,],[-9,-11,-12,-13,-14,-10,-37,-1,-3,-4,-6,-8,120,-16,-21,-33,-34,-2,-5,-7,-20,-15,]),'SEMICOLON':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,67,69,70,71,72,73,75,76,77,78,79,80,82,84,85,87,91,113,114,115,116,117,118,119,124,],[23,-54,-57,-58,-26,66,-24,-25,-27,-28,-29,-30,-31,-32,-52,-53,-55,-56,-22,-62,92,-59,-60,-61,95,-43,-44,-45,-46,-47,100,102,104,108,-23,125,-69,-68,-70,-71,126,127,-63,]),'AND':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[24,-54,-57,-58,24,24,24,24,24,24,24,24,24,24,-52,-53,-55,-56,24,24,-22,-23,]),'OR':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[25,-54,-57,-58,25,25,25,25,25,25,25,25,25,25,-52,-53,-55,-56,25,25,-22,-23,]),'EQEQ':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[26,-54,-57,-58,26,26,26,26,26,26,26,26,26,26,-52,-53,-55,-56,26,26,-22,-23,]),'NOTEQ':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[27,-54,-57,-58,27,27,27,27,27,27,27,27,27,27,-52,-53,-55,-56,27,27,-22,-23,]),'LT':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[28,-54,-57,-58,28,28,28,28,28,28,28,28,28,28,-52,-53,-55,-56,28,28,-22,-23,]),'GT':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[29,-54,-57,-58,29,29,29,29,29,29,29,29,29,29,-52,-53,-55,-56,29,29,-22,-23,]),'LE':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[30,-54,-57,-58,30,30,30,30,30,30,30,30,30,30,-52,-53,-55,-56,30,30,-22,-23,]),'GE':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[31,-54,-57,-58,31,31,31,31,31,31,31,31,31,31,-52,-53,-55,-56,31,31,-22,-23,]),'PLUS':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[32,-54,-57,-58,32,32,32,32,32,32,32,32,32,32,-52,-53,-55,-56,32,32,-22,-23,]),'MINUS':([5,14,19,21,37,43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,67,91,],[33,-54,-57,-58,33,33,33,33,33,33,33,33,33,33,-52,-53,-55,-56,33,33,-22,-23,]),'IDENTIFIER':([10,11,12,17,55,57,59,65,94,101,103,109,],[34,35,36,42,69,69,69,88,69,69,69,88,]),'RPAREN':([14,19,21,37,44,45,46,47,48,49,50,51,52,53,54,61,62,63,64,65,67,68,88,90,91,112,122,],[-54,-57,-58,-26,67,-24,-25,-27,-28,-29,-30,-31,-32,-52,-53,-55,-56,86,87,89,-22,91,-35,111,-23,124,-36,]),'TIMES':([14,19,21,53,54,61,62,67,91,],[38,-57,-58,38,38,-55,-56,-22,-23,]),'DIVIDE':([14,19,21,53,54,61,62,67,91,],[39,-57,-58,39,39,-55,-56,-22,-23,]),'LPAREN':([15,16,20,42,74,],[40,41,44,65,93,]),'EQUALS':([34,35,36,75,76,77,78,79,80,83,85,114,115,116,117,],[55,57,59,94,-43,-44,-45,-46,-47,101,103,-69,-68,-70,-71,]),'COLON':([34,35,36,],[56,58,60,]),'STRING':([44,55,57,59,93,94,101,103,],[68,72,72,72,112,72,72,72,]),'CHARACTER':([55,57,59,94,101,103,],[73,73,73,73,73,73,]),'STRING_TYPE':([56,58,60,],[76,76,76,]),'NUMBER_TYPE':([56,58,60,],[77,77,77,]),'BOOLEAN_TYPE':([56,58,60,],[78,78,78,]),'CHAR_TYPE':([56,58,60,],[79,79,79,]),'ANY':([56,58,60,],[81,81,81,]),'LBRACKET':([76,77,78,81,],[96,97,98,99,]),'LBRACE':([86,89,111,120,],[106,106,106,106,]),'COMMA':([88,],[109,]),'RBRACKET':([96,97,98,99,],[114,115,116,117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,106,],[2,22,121,]),'statement':([0,3,86,89,106,111,120,],[3,3,107,107,3,107,107,]),'assignment':([0,3,86,89,106,111,120,],[4,4,4,4,4,4,4,]),'expression':([0,3,13,18,24,25,26,27,28,29,30,31,40,41,86,89,106,111,120,],[5,5,37,43,45,46,47,48,49,50,51,52,63,64,5,5,5,5,5,]),'if_statement':([0,3,86,89,106,111,120,],[6,6,6,6,6,6,6,]),'print_statement':([0,3,86,89,106,111,120,],[7,7,7,7,7,7,7,]),'function_def':([0,3,86,89,106,111,120,],[8,8,8,8,8,8,8,]),'return_statement':([0,3,86,89,106,111,120,],[9,9,9,9,9,9,9,]),'term':([0,3,13,18,24,25,26,27,28,29,30,31,32,33,40,41,86,89,106,111,120,],[14,14,14,14,14,14,14,14,14,14,14,14,53,54,14,14,14,14,14,14,14,]),'factor':([0,3,13,18,24,25,26,27,28,29,30,31,32,33,38,39,40,41,86,89,106,111,120,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,61,62,19,19,19,19,19,19,19,]),'value':([55,57,59,94,101,103,],[70,82,84,113,118,119,]),'data_type':([56,58,60,],[75,83,85,]),'array_type':([56,58,60,],[80,80,80,]),'param_list':([65,109,],[90,122,]),'statement_block':([86,89,111,120,],[105,110,123,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('assignment -> LET IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',5),
  ('assignment -> LET IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',6),
  ('assignment -> LET IDENTIFIER COLON data_type SEMICOLON','assignment',5,'p_assignment','sintactico.py',7),
  ('assignment -> CONST IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',8),
  ('assignment -> CONST IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',9),
  ('assignment -> VAR IDENTIFIER EQUALS value SEMICOLON','assignment',5,'p_assignment','sintactico.py',10),
  ('assignment -> VAR IDENTIFIER COLON data_type EQUALS value SEMICOLON','assignment',7,'p_assignment','sintactico.py',11),
  ('assignment -> VAR IDENTIFIER COLON data_type SEMICOLON','assignment',5,'p_assignment','sintactico.py',12),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','sintactico.py',16),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',17),
  ('statement -> print_statement','statement',1,'p_statement','sintactico.py',18),
  ('statement -> function_def','statement',1,'p_statement','sintactico.py',19),
  ('statement -> return_statement','statement',1,'p_statement','sintactico.py',20),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','sintactico.py',23),
  ('statement_block -> statement','statement_block',1,'p_statement_block','sintactico.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',27),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','sintactico.py',28),
  ('if_statement -> IF LPAREN expression RPAREN statement_block','if_statement',5,'p_if_statement','sintactico.py',31),
  ('if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block','if_statement',7,'p_if_statement','sintactico.py',32),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','sintactico.py',35),
  ('factor -> INPUT LPAREN RPAREN','factor',3,'p_input_expression','sintactico.py',38),
  ('factor -> INPUT LPAREN STRING RPAREN','factor',4,'p_input_expression','sintactico.py',39),
  ('expression -> expression AND expression','expression',3,'p_expression_logic','sintactico.py',42),
  ('expression -> expression OR expression','expression',3,'p_expression_logic','sintactico.py',43),
  ('expression -> NOT expression','expression',2,'p_expression_logic','sintactico.py',44),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_comparison','sintactico.py',47),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression_comparison','sintactico.py',48),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','sintactico.py',49),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','sintactico.py',50),
  ('expression -> expression LE expression','expression',3,'p_expression_comparison','sintactico.py',51),
  ('expression -> expression GE expression','expression',3,'p_expression_comparison','sintactico.py',52),
  ('function_def -> FUNCTION IDENTIFIER LPAREN RPAREN statement_block','function_def',5,'p_function_def','sintactico.py',55),
  ('function_def -> FUNCTION IDENTIFIER LPAREN param_list RPAREN statement_block','function_def',6,'p_function_def','sintactico.py',56),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','sintactico.py',59),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','sintactico.py',60),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintactico.py',63),
  ('class_def -> CLASS IDENTIFIER LBRACE class_body RBRACE','class_def',5,'p_class_def','sintactico.py',66),
  ('class_body -> class_member','class_body',1,'p_class_body','sintactico.py',69),
  ('class_body -> class_member class_body','class_body',2,'p_class_body','sintactico.py',70),
  ('class_member -> assignment','class_member',1,'p_class_member','sintactico.py',73),
  ('class_member -> function_def','class_member',1,'p_class_member','sintactico.py',74),
  ('data_type -> STRING_TYPE','data_type',1,'p_data_type','sintactico.py',77),
  ('data_type -> NUMBER_TYPE','data_type',1,'p_data_type','sintactico.py',78),
  ('data_type -> BOOLEAN_TYPE','data_type',1,'p_data_type','sintactico.py',79),
  ('data_type -> CHAR_TYPE','data_type',1,'p_data_type','sintactico.py',80),
  ('data_type -> array_type','data_type',1,'p_data_type','sintactico.py',81),
  ('body -> sentence','body',1,'p_body','sintactico.py',84),
  ('body -> sentence body','body',2,'p_body','sintactico.py',85),
  ('sentence -> assignment','sentence',1,'p_sentence','sintactico.py',88),
  ('sentence -> expression','sentence',1,'p_sentence','sintactico.py',89),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintactico.py',92),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintactico.py',95),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',98),
  ('term -> term TIMES factor','term',3,'p_term_times','sintactico.py',101),
  ('term -> term DIVIDE factor','term',3,'p_term_div','sintactico.py',104),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',107),
  ('factor -> NUMBER','factor',1,'p_factor_number','sintactico.py',110),
  ('value -> NUMBER','value',1,'p_value','sintactico.py',113),
  ('value -> STRING','value',1,'p_value','sintactico.py',114),
  ('value -> CHARACTER','value',1,'p_value','sintactico.py',115),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',116),
  ('value -> INPUT LPAREN STRING RPAREN','value',4,'p_value','sintactico.py',117),
  ('array -> LBRACKET RBRACKET','array',2,'p_array','sintactico.py',120),
  ('array -> LBRACKET element_list RBRACKET','array',3,'p_array','sintactico.py',121),
  ('element_list -> value','element_list',1,'p_element_list','sintactico.py',124),
  ('element_list -> value COMMA element_list','element_list',3,'p_element_list','sintactico.py',125),
  ('array_type -> NUMBER_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',128),
  ('array_type -> STRING_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',129),
  ('array_type -> BOOLEAN_TYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',130),
  ('array_type -> ANY LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',131),
  ('program -> statement_list','program',1,'p_program','sintactico.py',134),
]
